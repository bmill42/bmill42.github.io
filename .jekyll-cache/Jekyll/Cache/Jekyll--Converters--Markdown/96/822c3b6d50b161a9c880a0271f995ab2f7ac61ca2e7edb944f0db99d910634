I"π+<p>I‚Äôm not much of a gambler, so I was fortunate on my first trip to Las Vegas last year to be traveling with a friend who really know the ropes (e.g. among other things, where to find $8 steaks at 2 in the morning). I came away from the experience, as you might expect, with less money in my bank account, but the losses were  surprisingly minimal thanks to my favorite of the various degenerate pastimes to which I was introduced: betting on tennis matches.</p>

<p>We were in Vegas during the clay-court leadup to the French Open, betting mainly on early-round matches in Rome; my proudest moment was picking then-seventeen-year-old Jannik Sinner‚Äôs upset over Steve Johnson, but we also did well overall, both when it came to picking individual matches and in ‚Äúsystem‚Äù betting, where out of a group of bets a certain number have to win to pay out. I don‚Äôt know the exact numbers, but we came out on top in the end.</p>

<p>Predicting tennis upsets is something of an art. Tennis is a messy game, and while a lot of matches go in favor of the higher-ranked player (around 65% of ATP matches, as we‚Äôll see), those remaining 35% that are upsets come about as a result of a lot of different factors: a mismatch of game styles or surface preferences, a ranking propped up by a great result nine months ago that doesn‚Äôt reflect a recent losing streak, a hot serving day by an underdog, a single net-cord shot in a tiebreaker‚Ä¶ It‚Äôs the kind of problem where a seemingly mediocre success rate might actually be state-of-the-art.</p>

<p>It‚Äôs also a great candidate for some data-driven exploration and modeling, because there‚Äôs a lot of good data available. I was inspired to take a look at this problem when I found match statistics from the ATP tour from most of the past 20 years on <a href="http://www.kaggle.com">Kaggle</a>, and I‚Äôve supplemented that dataset with player information from <a href="https://github.com/JeffSackmann/tennis_atp">Jeff Sackmann‚Äôs amazing repository</a>, where you can also find the same match data and much more.</p>

<p>There‚Äôs also some literature on the topic that provides an illuminating baseline (sorry) for the present exploration. Probably the best paper on tennis match prediction is Stephanie Kovalchik‚Äôs <a href="https://core.ac.uk/download/pdf/86638968.pdf">(2016)</a> overview of different approaches; there‚Äôs also this <a href="https://project-archive.inf.ed.ac.uk/msc/20172425/msc_proj.pdf">master‚Äôs thesis</a>, which provides its own helpful lit review, and <a href="http://cs229.stanford.edu/proj2017/final-reports/5242116.pdf">this paper</a>, which appears to be a project for a Stanford computer science course. <a href="http://on-the-t.com">Kovalchik</a> and <a href="http://www.tennisabstract.com/blog/">Sackmann</a> both also have excellent blogs filled with tons of discussion, software, and datasets related to tennis analytics. Also worth mentioning is a <a href="https://arxiv.org/pdf/1910.03203.pdf">paper by Zijian Gao and Amanda Kowalczyk</a>; I don‚Äôt know what to make of this one, which claims to get more than 80% accuracy on a dataset similar to the one used in all of the regression models (including mine) by way of a random forest model. I can‚Äôt figure out what exactly is going on there, and can‚Äôt find anything else from those authors, but if that number is real then they‚Äôre probably on a beach somewhere right now. You‚Äôll see why when I get to some of the initial numbers below.</p>

<p>Some interesting approaches involve modeling each match point-by-point, or modeling player performance against similar opponents. But in this post I‚Äôm only attempting a regression-based model, in part because it‚Äôs the easiest to implement with the kind of data I started with and in part because it‚Äôs the kind of thing I‚Äôm interested in getting more experience with. I‚Äôm hoping eventually to try my own version of the paired-comparison model that Kovalchik discusses, which I think intuitively captures some interesting dynamics, but that will be a separate project.</p>

<p>Since this is partly an educational project for me to work on some data science skills, I‚Äôll spend a bit more time narrating my process than would normally be necessary, but you can always skip ahead to the important stuff. When I first started, I took a naive pass at building a model without looking at the specifics of other similar approaches, just to see if my intuitions on the basic structure of the problem and the kind of features that might be useful were at least reasonable. They were, more or less, but as I continued tweaking and feature engineering I tried to make use of insights gained from the various papers I‚Äôd read, and the model presented here reflects the current state of things. As I go along, I‚Äôll flag things that I‚Äôm continuing to tune or that I‚Äôm planning to work on for a future post.</p>

<h2 id="setup">Setup</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span> <span class="c1"># linear algebra
</span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span> <span class="c1"># data processing, CSV file I/O (e.g. pd.read_csv)
</span><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">from</span> <span class="nn">tqdm.notebook</span> <span class="kn">import</span> <span class="n">tqdm</span><span class="p">,</span> <span class="n">trange</span>
<span class="kn">import</span> <span class="nn">time</span>    <span class="c1"># to be used in loop iterations
</span><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">training_year</span> <span class="o">=</span> <span class="mi">2000</span>
<span class="n">years</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">training_year</span><span class="p">,</span> <span class="mi">2016</span><span class="p">)</span>
<span class="n">data_frames</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">years</span><span class="p">:</span>
    <span class="n">file_path</span> <span class="o">=</span> <span class="s">"./atp_data/atp_matches_"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="s">".csv"</span>
    <span class="n">data_frames</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">file_path</span><span class="p">))</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">(</span><span class="n">data_frames</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># This list isn't used directly in the code but is helpful as quick documentation
</span><span class="n">cols</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'tourney_id'</span><span class="p">,</span> <span class="c1"># Id of Tournament
</span>    <span class="s">'tourney_name'</span><span class="p">,</span> <span class="c1"># Name of the Tournament
</span>    <span class="s">'surface'</span><span class="p">,</span> <span class="c1"># Surface of the Court (Hard, Clay, Grass)
</span>    <span class="s">'draw_size'</span><span class="p">,</span> <span class="c1"># Number of people in the tournament
</span>    <span class="s">'tourney_level'</span><span class="p">,</span> <span class="c1"># Level of the tournament (A=ATP Tour, D=Davis Cup, G=Grand Slam, M=Masters)
</span>    <span class="s">'tourney_date'</span><span class="p">,</span> <span class="c1"># Start date of tournament
</span>    <span class="s">'match_num'</span><span class="p">,</span> <span class="c1"># Match number
</span>    <span class="s">'winner_id'</span><span class="p">,</span> <span class="c1"># Id of winner
</span>    <span class="s">'winner_seed'</span><span class="p">,</span> <span class="c1"># Seed of winner
</span>    <span class="s">'winner_entry'</span><span class="p">,</span> <span class="c1"># How the winner entered the tournament
</span>    <span class="s">'winner_name'</span><span class="p">,</span> <span class="c1"># Name of winner
</span>    <span class="s">'winner_hand'</span><span class="p">,</span> <span class="c1"># Dominant hand of winner (L=Left, R=Right, U=Unknown?)
</span>    <span class="s">'winner_ht'</span><span class="p">,</span> <span class="c1"># Height in cm of winner
</span>    <span class="s">'winner_ioc'</span><span class="p">,</span> <span class="c1"># Country of winner
</span>    <span class="s">'winner_age'</span><span class="p">,</span> <span class="c1"># Age of winner
</span>    <span class="s">'winner_rank'</span><span class="p">,</span> <span class="c1"># Rank of winner
</span>    <span class="s">'winner_rank_points'</span><span class="p">,</span> <span class="c1"># Rank points of winner
</span>    <span class="s">'loser_id'</span><span class="p">,</span>
    <span class="s">'loser_seed'</span><span class="p">,</span>
    <span class="s">'loser_entry'</span><span class="p">,</span>
    <span class="s">'loser_name'</span><span class="p">,</span>
    <span class="s">'loser_hand'</span><span class="p">,</span>
    <span class="s">'loser_ht'</span><span class="p">,</span>
    <span class="s">'loser_ioc'</span><span class="p">,</span>
    <span class="s">'loser_age'</span><span class="p">,</span>
    <span class="s">'loser_rank'</span><span class="p">,</span>
    <span class="s">'loser_rank_points'</span><span class="p">,</span>
    <span class="s">'score'</span><span class="p">,</span> <span class="c1"># Score
</span>    <span class="s">'best_of'</span><span class="p">,</span> <span class="c1"># Best of X number of sets
</span>    <span class="s">'round'</span><span class="p">,</span> <span class="c1"># Round
</span>    <span class="s">'minutes'</span><span class="p">,</span> <span class="c1"># Match length in minutes
</span>    <span class="s">'w_ace'</span><span class="p">,</span> <span class="c1"># Number of aces for winner
</span>    <span class="s">'w_df'</span><span class="p">,</span> <span class="c1"># Number of double faults for winner
</span>    <span class="s">'w_svpt'</span><span class="p">,</span> <span class="c1"># Number of service points played by winner 'w_2ndWon' / ('w_svpt' - 'w_1stIn' - 'w_df')
</span>    <span class="s">'w_1stIn'</span><span class="p">,</span> <span class="c1"># Number of first serves in for winner
</span>    <span class="s">'w_1stWon'</span><span class="p">,</span> <span class="c1"># Number of first serve points won for winner
</span>    <span class="s">'w_2ndWon'</span><span class="p">,</span> <span class="c1"># Number of second serve points won for winner
</span>    <span class="s">'w_SvGms'</span><span class="p">,</span> <span class="c1"># Number of service games played by winner
</span>    <span class="s">'w_bpSaved'</span><span class="p">,</span> <span class="c1"># Number of break points saved by winner
</span>    <span class="s">'w_bpFaced'</span><span class="p">,</span> <span class="c1"># Number of break points faced by winner
</span>    <span class="s">'l_ace'</span><span class="p">,</span>
    <span class="s">'l_df'</span><span class="p">,</span>
    <span class="s">'l_svpt'</span><span class="p">,</span>
    <span class="s">'l_1stIn'</span><span class="p">,</span>
    <span class="s">'l_1stWon'</span><span class="p">,</span>
    <span class="s">'l_2ndWon'</span><span class="p">,</span>
    <span class="s">'l_SvGms'</span><span class="p">,</span>
    <span class="s">'l_bpSaved'</span><span class="p">,</span>
    <span class="s">'l_bpFaced'</span>
<span class="p">]</span>
</code></pre></div></div>

<p>The main basic feature that isn‚Äôt included in the main dataset is player date-of-birth, which we‚Äôll grab from Jeff Sackmann‚Äôs dataset. At the moment, I‚Äôm merging <code class="highlighter-rouge">DOB</code> into the match dataset later, during training.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># From https://github.com/JeffSackmann/tennis_atp - thank you!
</span><span class="n">atp_players</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"./atp_data/atp_players.csv"</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="s">'player_id'</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="p">{</span><span class="s">'DOB'</span><span class="p">:</span> <span class="nb">str</span><span class="p">})</span>
<span class="c1"># There are some missing values, but they seem mostly to be for players who aren't in my dataset.
# Issues seems mainly to be with historical and low-ranked players
# I'm mostly just dropping entries that are missing information I need
</span><span class="n">atp_players</span><span class="p">.</span><span class="n">DOB</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">atp_players</span><span class="p">.</span><span class="n">DOB</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="s">'%Y%m%d'</span><span class="p">,</span><span class="n">errors</span><span class="o">=</span><span class="s">'coerce'</span><span class="p">)</span>
<span class="n">atp_players</span><span class="p">[</span><span class="s">'full_name'</span><span class="p">]</span> <span class="o">=</span> <span class="n">atp_players</span><span class="p">[</span><span class="s">'first_name'</span><span class="p">]</span> <span class="o">+</span> <span class="s">' '</span> <span class="o">+</span> <span class="n">atp_players</span><span class="p">[</span><span class="s">'last_name'</span><span class="p">]</span>
<span class="n">atp_players</span> <span class="o">=</span> <span class="n">atp_players</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">atp_players</span><span class="p">[</span><span class="s">'full_name'</span><span class="p">].</span><span class="n">notna</span><span class="p">()]</span>
<span class="n">atp_players</span> <span class="o">=</span> <span class="n">atp_players</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">atp_players</span><span class="p">[</span><span class="s">'DOB'</span><span class="p">].</span><span class="n">notna</span><span class="p">()]</span>
<span class="c1"># There are also some duplicates
</span><span class="n">atp_players</span> <span class="o">=</span> <span class="n">atp_players</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="o">~</span><span class="n">atp_players</span><span class="p">.</span><span class="n">full_name</span><span class="p">.</span><span class="n">duplicated</span><span class="p">(</span><span class="n">keep</span><span class="o">=</span><span class="s">'first'</span><span class="p">)]</span>
<span class="c1"># Cleaning up a single rogue capitalization issue
</span><span class="n">atp_players</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">103560</span><span class="p">,</span> <span class="s">'full_name'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'KJ Hippensteel'</span>
</code></pre></div></div>

<p>This dataset is pretty clean overall. There are some matches with no stats which are clearly walkovers, and Davis Cup matches also seem to be recorded without any stats, but there are also some matches that seem to have had points played but that don‚Äôt have any stats ‚Äì it‚Äôs possible that matches that ended with a retirement didn‚Äôt have stats recorded, but I‚Äôll have to look into this further. Matches with no rankings listed are also useless for my purposes; I‚Äôll just drop all of these, since the number of missing or corrupted matches is small enough that it shouldn‚Äôt affect my models.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Drop rows with NaN values in 'w_ace', since that seems to capture all the matches with no stats.
# Strangely, there are 54 matches with nonzero 'minutes' but no stats
# There are still matches with no minutes but with stats, and the Davis Cup and ATP Finals matches seem to
# lack stats too... problems to solve
</span>
<span class="c1"># ALSO, there remain a lot of missing rankings... for now, I'm just dropping them all
</span><span class="n">data</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s">'w_ace'</span><span class="p">],</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">data</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s">'winner_rank'</span><span class="p">],</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">data</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s">'loser_rank'</span><span class="p">],</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># A very small number of players have their heights missing - just fill with the median for now
</span><span class="n">data</span><span class="p">[</span><span class="s">'winner_ht'</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'winner_ht'</span><span class="p">].</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">data</span><span class="p">[</span><span class="s">'loser_ht'</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'loser_ht'</span><span class="p">].</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="baseline">Baseline</h2>

<p>The ranking system is its own form of predictive model that gets us quite a bit past 50/50 when it comes to predictions. How often does the better-ranked player (a term I use to avoid confusion when comparing rankings and proportions, since colloquially a ‚Äúhigher‚Äù ranking is a smaller number) win the match?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">to_rank</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'winner_rank'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">[</span><span class="s">'loser_rank'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Better‚Äìranked player won:"</span><span class="p">,</span> <span class="n">to_rank</span><span class="p">.</span><span class="n">mean</span><span class="p">())</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Better‚Äìranked player won: 0.6560835676244029
</code></pre></div></div>

<p>Over this 16-year period, the winner is the higher-ranked player nearly 66% of the time. Of course, if we‚Äôre talking about betting, accuracy alone isn‚Äôt necessarily the only relevant factor. We‚Äôre not just going to bet on every match, but instead would rather be able to say things like: ‚ÄúAn upset in this particular match would pay really well, and I‚Äôm X% confident that it‚Äôll be an upset.‚Äù Of course, it‚Äôs probably asking too much to hope for a model that would consistently predict big upsets both accurately and confidently, but obviously the ROI for a model that correctly predicts lots of upsets will be better than the ROI for a model that gets the same total number of predictions right but gets more of its accuracy from picking favorites.</p>

<p>Speaking of betting, another useful baseline is the betting odds. Kovalchik compares her own results to a ‚Äúbookmakers‚Äô consensus model‚Äù (BCM) developed in a previous study that simply averages the odds from a number of major bookmakers, predicting the winner 72% of the time ‚Äì a big improvement over the rankings-only ‚Äúmodel.‚Äù We can test this out ourselves fairly easily, thanks to the fantastic <a href="http://www.tennis-data.co.uk/alldata.php">odds data compiled by tennis-data.co.uk</a>. For convenience, I‚Äôm looking at the data for 2010‚Äì2015 here, because the datasets for the earlier years aren‚Äôt formatted in quite the same way and we just need a rough baseline for now.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">odds_frames</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span>
    <span class="n">filestring</span> <span class="o">=</span> <span class="s">"./atp_data/odds/"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="mi">2010</span><span class="p">)</span> <span class="o">+</span> <span class="s">".xls"</span>
    <span class="n">odds_frames</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">read_excel</span><span class="p">(</span><span class="n">filestring</span><span class="p">))</span>

<span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">):</span>
    <span class="n">filestring</span> <span class="o">=</span> <span class="s">"./atp_data/odds/"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="mi">2010</span><span class="p">)</span> <span class="o">+</span> <span class="s">".xlsx"</span>
    <span class="n">odds_frames</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">read_excel</span><span class="p">(</span><span class="n">filestring</span><span class="p">))</span>

<span class="n">odds_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">(</span><span class="n">odds_frames</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">odds_data</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s">'AvgW'</span><span class="p">],</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">odds_data</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s">'LRank'</span><span class="p">],</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">odds_data</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s">'WRank'</span><span class="p">],</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># Grab the most relevant columns (the dataset includes odds from multiple bookmakers as well as an average)
</span><span class="n">odds_matches</span> <span class="o">=</span> <span class="n">odds_data</span><span class="p">[[</span><span class="s">'Winner'</span><span class="p">,</span><span class="s">'Loser'</span><span class="p">,</span><span class="s">'WRank'</span><span class="p">,</span><span class="s">'LRank'</span><span class="p">,</span><span class="s">'AvgW'</span><span class="p">,</span><span class="s">'AvgL'</span><span class="p">]].</span><span class="n">copy</span><span class="p">()</span>
<span class="c1"># The odds from each match are labeled according to winner and loser, so identifying upsets is easy
</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'upset'</span><span class="p">]</span> <span class="o">=</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'WRank'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'LRank'</span><span class="p">]</span>
<span class="c1"># Sanity check:
</span><span class="n">odds_matches</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: center;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th>Winner</th>
      <th>Loser</th>
      <th>WRank</th>
      <th>LRank</th>
      <th>AvgW</th>
      <th>AvgL</th>
      <th>upset</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>941</th>
      <td>De Bakker T.</td>
      <td>Falla A.</td>
      <td>67.0</td>
      <td>58.0</td>
      <td>1.52</td>
      <td>2.46</td>
      <td>True</td>
    </tr>
    <tr>
      <th>942</th>
      <td>Hajek J.</td>
      <td>Starace P.</td>
      <td>86.0</td>
      <td>61.0</td>
      <td>3.12</td>
      <td>1.34</td>
      <td>True</td>
    </tr>
    <tr>
      <th>943</th>
      <td>Schwank E.</td>
      <td>Fognini F.</td>
      <td>59.0</td>
      <td>74.0</td>
      <td>1.99</td>
      <td>1.77</td>
      <td>False</td>
    </tr>
    <tr>
      <th>944</th>
      <td>Garcia-Lopez G.</td>
      <td>Rochus C.</td>
      <td>42.0</td>
      <td>122.0</td>
      <td>1.36</td>
      <td>3.02</td>
      <td>False</td>
    </tr>
    <tr>
      <th>945</th>
      <td>Bellucci T.</td>
      <td>Nieminen J.</td>
      <td>33.0</td>
      <td>64.0</td>
      <td>1.46</td>
      <td>2.63</td>
      <td>False</td>
    </tr>
  </tbody>
</table>
</div>

<p>An upset is predicted when the decimal odds are lower for the worse‚Äìranked player. We have to check for both correct and incorrect predictions, but both amount to asking whether the worse-ranked player was favored.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Winner was not favored (higher decimal odds) and winner had a better rank (smaller number)
</span><span class="n">pred_upset1</span> <span class="o">=</span> <span class="p">(</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'AvgW'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'AvgL'</span><span class="p">])</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'WRank'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'LRank'</span><span class="p">])</span>
<span class="c1"># Winner was favored (lower decimal odds) and winner had a worse rank (bigger number)
</span><span class="n">pred_upset2</span> <span class="o">=</span> <span class="p">(</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'AvgW'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'AvgL'</span><span class="p">])</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'WRank'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'LRank'</span><span class="p">])</span>
<span class="c1"># Combine the two
</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_upset'</span><span class="p">]</span> <span class="o">=</span><span class="n">pred_upset1</span> <span class="o">|</span> <span class="n">pred_upset2</span>

<span class="c1"># Was the match both an upset and predicted as such by the odds?
</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_upset_correctly'</span><span class="p">]</span> <span class="o">=</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'upset'</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_upset'</span><span class="p">]</span>
<span class="c1"># We also want to know if the odds predicted the outcome correctly regardless of upset status
</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_match_correctly'</span><span class="p">]</span> <span class="o">=</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'AvgL'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'AvgW'</span><span class="p">]</span>

<span class="n">odds_matches</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: center;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th>Winner</th>
      <th>Loser</th>
      <th>WRank</th>
      <th>LRank</th>
      <th>AvgW</th>
      <th>AvgL</th>
      <th>upset</th>
      <th>pred_upset</th>
      <th>pred_upset_correctly</th>
      <th>pred_match_correctly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>941</th>
      <td>De Bakker T.</td>
      <td>Falla A.</td>
      <td>67.0</td>
      <td>58.0</td>
      <td>1.52</td>
      <td>2.46</td>
      <td>True</td>
      <td>True</td>
      <td>True</td>
      <td>True</td>
    </tr>
    <tr>
      <th>942</th>
      <td>Hajek J.</td>
      <td>Starace P.</td>
      <td>86.0</td>
      <td>61.0</td>
      <td>3.12</td>
      <td>1.34</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>943</th>
      <td>Schwank E.</td>
      <td>Fognini F.</td>
      <td>59.0</td>
      <td>74.0</td>
      <td>1.99</td>
      <td>1.77</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>944</th>
      <td>Garcia-Lopez G.</td>
      <td>Rochus C.</td>
      <td>42.0</td>
      <td>122.0</td>
      <td>1.36</td>
      <td>3.02</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <th>945</th>
      <td>Bellucci T.</td>
      <td>Nieminen J.</td>
      <td>33.0</td>
      <td>64.0</td>
      <td>1.46</td>
      <td>2.63</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <th>946</th>
      <td>Chela J.I.</td>
      <td>Krajinovic F.</td>
      <td>53.0</td>
      <td>328.0</td>
      <td>1.13</td>
      <td>5.50</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <th>947</th>
      <td>Hernandez O.</td>
      <td>Marchenko I.</td>
      <td>100.0</td>
      <td>79.0</td>
      <td>1.45</td>
      <td>2.65</td>
      <td>True</td>
      <td>True</td>
      <td>True</td>
      <td>True</td>
    </tr>
    <tr>
      <th>948</th>
      <td>Almagro N.</td>
      <td>Ventura S.</td>
      <td>34.0</td>
      <td>129.0</td>
      <td>1.09</td>
      <td>7.15</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <th>949</th>
      <td>Cuevas P.</td>
      <td>Zeballos H.</td>
      <td>54.0</td>
      <td>50.0</td>
      <td>1.97</td>
      <td>1.77</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>950</th>
      <td>Granollers M.</td>
      <td>Kubot L.</td>
      <td>93.0</td>
      <td>41.0</td>
      <td>1.66</td>
      <td>2.15</td>
      <td>True</td>
      <td>True</td>
      <td>True</td>
      <td>True</td>
    </tr>
  </tbody>
</table>
</div>

<p>From the first few matches, we can see, for example, that the odds favored Fabio Fognini to upset Eduardo Schwank, but Schwank won. On the other hand, the bookmakers correctly predicted Alejandro Falla would beat Thiemo de Bakker. For this set of ten matches, the odds called for four upsets and was right about three ‚Äì not bad!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Bookmakers got the call:"</span><span class="p">,</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_match_correctly'</span><span class="p">].</span><span class="n">mean</span><span class="p">())</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Bookmakers got the call: 0.7104411169566976
</code></pre></div></div>

<p>It turns out that the bookmakers got about 71% of the matches right in in 2010‚Äì2015, very close to Kovalchik‚Äôs figure of 72% and above the rankings baseline. But I‚Äôm even more interested to know how well the bookmakers did when it comes to upsets.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Precision: true positives over true and false positives
</span><span class="n">odds_prec</span> <span class="o">=</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_upset_correctly'</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_upset'</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Precision:"</span><span class="p">,</span> <span class="n">odds_prec</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Precision: 0.6121700879765396
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Negative predictive value: true negatives over true and false negatives
</span><span class="n">odds_npv</span> <span class="o">=</span> <span class="p">(</span><span class="o">~</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'upset'</span><span class="p">]</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_upset'</span><span class="p">]).</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="p">(</span><span class="o">~</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_upset'</span><span class="p">]).</span><span class="nb">sum</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Negative predictive value:"</span><span class="p">,</span> <span class="n">odds_npv</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Negative predictive value: 0.7331790378574972
</code></pre></div></div>

<p>Out of the matches that the BCM predicted to be upsets, about 61% were actually upsets. That doesn‚Äôt sound particularly high, but given that the most obvious baseline ‚Äì the ranking system ‚Äì assumes that no upsets occur at all, the bookmakers are clearly getting some serious value out of other kinds of information. And when the bookmakers predicted a non-upset, they were right about 73% of the time. (I‚Äôd like to probe these numbers further by simulating some other simplistic baselines, like picking the winner at random from a distribution that depends on the rank differential. Kovalchik also points to a study that does something related).</p>

<p>We can start to see that, overall, it‚Äôs probably more interesting to think of upsets, rather than outcomes, as our actual prediction target, since it captures a more intuitively interesting aspect of the sport and because it allows us to think in terms of statistical features like sensitivity and specificity. (e.g. what would it mean to have a false positive or negative in predicting the outcome of a match? The question only makes sense when some additional feature, like ranking, is taken into account). I‚Äôll discuss issues involved in <em>actually</em> using upsets as target values in machine learning models in another post. For now, we‚Äôll take a closer look at the BCM.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Sensitivity: true positives over real positives
</span><span class="n">odds_sens</span> <span class="o">=</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_upset_correctly'</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'upset'</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Sensitivity:"</span><span class="p">,</span> <span class="n">odds_sens</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sensitivity: 0.34095549203756637
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Specificity: true negatives over real negatives
</span><span class="n">odds_spec</span> <span class="o">=</span> <span class="p">(</span><span class="o">~</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'upset'</span><span class="p">]</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_upset'</span><span class="p">]).</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="p">(</span><span class="o">~</span><span class="n">odds_matches</span><span class="p">[</span><span class="s">'upset'</span><span class="p">]).</span><span class="nb">sum</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Specificity:"</span><span class="p">,</span> <span class="n">odds_spec</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Specificity: 0.8934327155519742
</code></pre></div></div>

<p>Out of the matches that actually were upsets, the BCM got about 34% of them. In statistical terms, that‚Äôs the sensitivity; the false negative rate is 1 minus sensitivity, or about 66%. The specificity, or the proportion of non-upsets correctly identified as such, is about 89%; that means that the model got about 89% of the non-upsets right. The false positive rate is thus about 11%, so the BCM only missed about 11% of matches that held to rank (but keep in mind that it also predicted quite a few non-upsets that turned out to be upsets).</p>

<p>Now, it‚Äôs worth returning to the paper by Gao and Kowalczyk, which claimed to achieve 83% accuracy with a random forest model (they came up with BCM and logistic regression figures similar to those reported elsewhere). While I‚Äôd like to hold out hope that that number is real, it‚Äôs just too good to be true; there‚Äôs no way they actually beat the bookmakers by more than 12 points. They don‚Äôt provide enough technical information to replicate their study very closely, nor do they break their results down by upsets or other features commonly seen in the literature, though they do report confidence scores for the various models. I‚Äôve tried building similar models with nearly the same set of features and haven‚Äôt gotten close to 83% accuracy. Overall, I think it‚Äôs most likely that this was a result of some kind of data leakage, or maybe a simple coding error (the paper is just a preprint, so there‚Äôs been no professional confirmation or endorsement of its results).</p>

<h2 id="initial-feature-engineering">Initial Feature Engineering</h2>

<p>There are a couple steps involved in getting the ATP match data into a form that can be used to train a model. The columns are labeled and ordered by <code class="highlighter-rouge">winner</code> and <code class="highlighter-rouge">loser</code>, which is obviously information we‚Äôll need to hide since that‚Äôs precisely what we‚Äôre hoping to predict. The solution to that issue is discussed below. First, and more simply, we need to get the raw match stats into a more useful form; it‚Äôs not very helpful to know how many first serve points a player won if we don‚Äôt know how their first serve percentage. Here, I put together some of the basic stats that most tennis fans are familiar with: first serve percentage, percentage of points won when the first serve is in, and percentage of points won on second serve.</p>

<p>I also convert the <code class="highlighter-rouge">round</code> information into an integer that corresponds to the number of rounds remaining in the tournament (a feature that is described in a couple of the papers mentioned above), inclusive of the present match. I somewhat arbitrarily set <code class="highlighter-rouge">RR</code> (for round-robin) to 4, which amounts to the semifinals (which usually follow <code class="highlighter-rouge">RR</code>) plus 2. perhaps there‚Äôs a better way to encode round information in general; I may explore this further in a later iteration.</p>

<p>Finally, some housekeeping: in addition to parsing the tournament date, I add a tiny timedelta determined by the match number in the tournament. This is necessary because individual matches don‚Äôt have dates; while my encoding creates duplicates in <code class="highlighter-rouge">date_parsed</code> across the various tournaments going on in a single week, the duplication goes away when I grab all the matches for an individual player, and still allows me to be sure that they‚Äôre sorted correctly by date. I also produce a unique ID number for each match that consists of the tournament ID and the match number; this is used later for the processing involved in getting the data into a form appropriate for a predictive model.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">[</span><span class="s">'round'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'round'</span><span class="p">].</span><span class="nb">map</span><span class="p">({</span><span class="s">'R32'</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">'R16'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'R64'</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s">'R128'</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s">'QF'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">'SF'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'F'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'RR'</span><span class="p">:</span> <span class="mi">4</span><span class="p">})</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Add some percentage features
</span>
<span class="c1"># 1st serve percentage
</span><span class="n">data</span><span class="p">[</span><span class="s">'w_1st%'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'w_1stIn'</span><span class="p">]</span> <span class="o">/</span> <span class="n">data</span><span class="p">[</span><span class="s">'w_svpt'</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s">'l_1st%'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_1stIn'</span><span class="p">]</span> <span class="o">/</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_svpt'</span><span class="p">]</span>

<span class="c1"># ratio of first serves won to first serves in
</span><span class="n">data</span><span class="p">[</span><span class="s">'w_1stRatio'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'w_1stWon'</span><span class="p">]</span> <span class="o">/</span> <span class="n">data</span><span class="p">[</span><span class="s">'w_1stIn'</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s">'l_1stRatio'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_1stWon'</span><span class="p">]</span> <span class="o">/</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_1stIn'</span><span class="p">]</span>

<span class="c1"># ratio of second serve points won to second serves points (not incl DFs)
# 'w_2ndWon' / ('w_svpt' - 'w_1stIn' - 'w_df')
</span><span class="n">w_2ndPlayed</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'w_svpt'</span><span class="p">]</span> <span class="o">-</span> <span class="n">data</span><span class="p">[</span><span class="s">'w_1stIn'</span><span class="p">]</span> <span class="o">-</span> <span class="n">data</span><span class="p">[</span><span class="s">'w_df'</span><span class="p">]</span>
<span class="n">l_2ndPlayed</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_svpt'</span><span class="p">]</span> <span class="o">-</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_1stIn'</span><span class="p">]</span> <span class="o">-</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_df'</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s">'w_2ndRatio'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'w_2ndWon'</span><span class="p">]</span> <span class="o">/</span> <span class="n">w_2ndPlayed</span>
<span class="n">data</span><span class="p">[</span><span class="s">'l_2ndRatio'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_2ndWon'</span><span class="p">]</span> <span class="o">/</span> <span class="n">l_2ndPlayed</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">[</span><span class="s">'date_parsed'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'tourney_date'</span><span class="p">],</span> <span class="nb">format</span><span class="o">=</span><span class="s">"%Y%m%d"</span><span class="p">)</span>
<span class="n">data</span><span class="p">[</span><span class="s">'date_parsed'</span><span class="p">]</span> <span class="o">+=</span> <span class="n">data</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="n">datetime</span><span class="p">.</span><span class="n">timedelta</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">row</span><span class="p">.</span><span class="n">match_num</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">data</span><span class="p">[</span><span class="s">'unique_id'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'tourney_id'</span><span class="p">].</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span> <span class="o">+</span> <span class="s">"%"</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="s">'match_num'</span><span class="p">].</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="exploratory-analysis">Exploratory Analysis</h2>

<p>There‚Äôs plenty we could do with the data in its present form; since this is a long post, I won‚Äôt do much before getting to the model itself, so there‚Äôs a lot more that could be done, especially in terms of looking for trends over time. Let‚Äôs take a look at some serving stats for now.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">fig</span><span class="p">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">'Serve Ratios'</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="n">scatterplot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">x</span><span class="o">=</span><span class="s">'w_1stRatio'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'l_1stRatio'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Winner 1st serve won'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Loser 1st serve won'</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="n">scatterplot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">x</span><span class="o">=</span><span class="s">'w_2ndRatio'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'l_2ndRatio'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Winner 2nd serve won'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Loser 2nd serve won'</span><span class="p">)</span>

<span class="n">lims</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span> <span class="n">lims</span><span class="p">,</span> <span class="n">lims</span><span class="p">,</span> <span class="s">':k'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span> <span class="n">lims</span><span class="p">,</span> <span class="n">lims</span><span class="p">,</span> <span class="s">':k'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/posts/tennis/output_28_0.png" alt="png" /></p>

<p>The percentage of first serve points won is clearly a strong predictor of the winner of a match; the winner won a higher percentage of first serve points in all matches below the line of equality, which is a large majority. Second serves show a similar but less extreme pattern, along with some stranger outliers. There seems to be at least one match where the winner won none of their second serve points and the loser won all of theirs, which is plausible but very surprising. It‚Äôs possible that some of these extreme results represent errors, and it would be interesting to take a look at some of those matches more closely, but none of them represent an impossible result and the data as a whole look about like we‚Äôd expect.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Winner had higher 1st in pct: "</span><span class="p">,</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'w_1st%'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_1st%'</span><span class="p">]).</span><span class="n">mean</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Winner won higher pct of 1st serve pts: "</span><span class="p">,</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'w_1stRatio'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_1stRatio'</span><span class="p">]).</span><span class="n">mean</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Winner won higher pct of 2nd serve pts: "</span><span class="p">,</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'w_2ndRatio'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_2ndRatio'</span><span class="p">]).</span><span class="n">mean</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Winner hit more total aces: "</span><span class="p">,</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'w_ace'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">[</span><span class="s">'l_ace'</span><span class="p">]).</span><span class="n">mean</span><span class="p">())</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Winner had higher 1st in pct:  0.5690415780932135
Winner won higher pct of 1st serve pts:  0.8319047292509543
Winner won higher pct of 2nd serve pts:  0.7748062812864294
Winner hit more total aces:  0.5969279297812522
</code></pre></div></div>

<p>Putting numbers to these and other significant serving stats, it turns out that 83% of the points in that first plot are below the line of equality, such that the winning player won a higher proportion of first serve points (it‚Äôs too bad we can‚Äôt use this data to predict winners). Interestingly, the winning player also had an advantage in percentage of first serves in and in total aces, but these numbers are much less predictive; tennis fans can probably think of plenty of example of matches where the winner hit more aces than the loser (one of Ivo Karlovic‚Äôs then-record-setting matches was a Davis Cup rubber that he lost while hitting north of 50 aces, if I remember correctly; though that match isn‚Äôt represented in this dataset). I‚Äôm more surprised, though, by the large gap between first-serve-in and first-serve-won percentages. I‚Äôd guess that there are a lot of lower-ranked players out there who rarely hit faults but whose serves are not big enough weapons to win many free points.</p>

<p>What about the breakdown of serving performance by surface?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">fig</span><span class="p">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">'Winner First Serve Points Won by Surface'</span><span class="p">)</span>
<span class="n">colors</span> <span class="o">=</span> <span class="p">{</span><span class="s">'Hard'</span><span class="p">:</span> <span class="s">'C0'</span><span class="p">,</span> <span class="s">'Clay'</span><span class="p">:</span> <span class="s">'C1'</span><span class="p">,</span> <span class="s">'Grass'</span><span class="p">:</span> <span class="s">'C2'</span><span class="p">,</span> <span class="s">'Carpet'</span><span class="p">:</span> <span class="s">'C3'</span><span class="p">}</span>

<span class="n">serving_old</span> <span class="o">=</span> <span class="n">data</span><span class="p">[(</span><span class="n">data</span><span class="p">[</span><span class="s">'w_1stRatio'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">0.4</span><span class="p">)</span>
                   <span class="o">&amp;</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'date_parsed'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="s">'2003-01-01'</span><span class="p">)</span>
                   <span class="o">&amp;</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'surface'</span><span class="p">]</span> <span class="o">!=</span> <span class="s">'Carpet'</span><span class="p">)]</span>
<span class="n">serving_new</span> <span class="o">=</span> <span class="n">data</span><span class="p">[(</span><span class="n">data</span><span class="p">[</span><span class="s">'w_1stRatio'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">0.4</span><span class="p">)</span>
                   <span class="o">&amp;</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'date_parsed'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="s">'2013-01-01'</span><span class="p">)]</span>

<span class="n">sns</span><span class="p">.</span><span class="n">kdeplot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
            <span class="n">data</span><span class="o">=</span><span class="n">serving_old</span><span class="p">,</span>
            <span class="n">x</span><span class="o">=</span><span class="s">'w_1stRatio'</span><span class="p">,</span>
            <span class="n">hue</span><span class="o">=</span><span class="s">'surface'</span><span class="p">,</span>
            <span class="n">multiple</span><span class="o">=</span><span class="s">'layer'</span><span class="p">,</span>
            <span class="n">palette</span><span class="o">=</span><span class="n">colors</span><span class="p">)</span> <span class="c1"># , bins=70, stat='density',
</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Winner 1st serve points won'</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="s">'2000-2002'</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="n">kdeplot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
            <span class="n">data</span><span class="o">=</span><span class="n">serving_new</span><span class="p">,</span>
            <span class="n">x</span><span class="o">=</span><span class="s">'w_1stRatio'</span><span class="p">,</span>
            <span class="n">hue</span><span class="o">=</span><span class="s">'surface'</span><span class="p">,</span>
            <span class="n">multiple</span><span class="o">=</span><span class="s">'layer'</span><span class="p">,</span>
            <span class="n">palette</span><span class="o">=</span><span class="n">colors</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Winner 1st serve points won'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="s">'2013-2015'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/posts/tennis/output_32_0.png" alt="png" /></p>

<p>Here, I‚Äôve plotted the winner‚Äôs first serve won percentage by surface in two time spans from the opposite ends of the dataset, which could give us a sense of whether serving performance changed over time (I‚Äôve excluded matches played on indoor carpet, which only turn up in the earlier window and make up a tiny fraction of the total matches, making it harder to compare the two plots). In general, serve strength (or strength on serve, which is not necessarily the same thing) seems to have improved slightly on all surfaces.</p>

<p>We can juxtapose these two kinds of visualization to compare both players‚Äô strength on first serve on different surfaces, as in the plot below. This time, I‚Äôve included carpet and used the whole dataset, and the results are not surprising: serve strength for both winner and loser improves as you move from slower to faster surfaces, with grass and carpet being about the same.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>

<span class="n">colors</span> <span class="o">=</span> <span class="p">{</span><span class="s">'Hard'</span><span class="p">:</span> <span class="s">'C0'</span><span class="p">,</span> <span class="s">'Clay'</span><span class="p">:</span> <span class="s">'C1'</span><span class="p">,</span> <span class="s">'Grass'</span><span class="p">:</span> <span class="s">'C2'</span><span class="p">,</span> <span class="s">'Carpet'</span><span class="p">:</span> <span class="s">'C3'</span><span class="p">}</span>
<span class="n">g</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">jointplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s">'w_1stRatio'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'l_1stRatio'</span><span class="p">,</span> <span class="n">hue</span><span class="o">=</span><span class="s">'surface'</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="n">colors</span><span class="p">,</span> <span class="n">kind</span><span class="o">=</span><span class="s">'kde'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.7</span><span class="p">)</span>
<span class="n">lims</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="n">g</span><span class="p">.</span><span class="n">ax_joint</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">lims</span><span class="p">,</span> <span class="n">lims</span><span class="p">,</span> <span class="s">':k'</span><span class="p">)</span>
<span class="n">g</span><span class="p">.</span><span class="n">ax_joint</span><span class="p">.</span><span class="n">set_xlim</span><span class="p">(</span><span class="mf">0.4</span><span class="p">,</span><span class="mf">1.0</span><span class="p">)</span>
<span class="n">g</span><span class="p">.</span><span class="n">ax_joint</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="mf">0.2</span><span class="p">,</span><span class="mf">1.0</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/posts/tennis/output_34_1.png" alt="png" /></p>

<p>As I‚Äôve mentioned, there‚Äôs much more that could be done, particularly around upsets (do more upsets happen in particular rounds? In matches involving lefties? Can we see evidence of hot streaks or bad game style matchups?). But for now, let‚Äôs get a basic model running.</p>

<h2 id="preparing-for-training">Preparing for Training</h2>

<p>The first step in preparing the data for modeling is to remove the leakage that comes from the winner-first order of the players. My strategy here is to make two copies of the data and swap the players in one copy, so that I end up with two versions of each match, with labels like <code class="highlighter-rouge">winner_rank</code> and <code class="highlighter-rouge">loser_rank</code> replaced with <code class="highlighter-rouge">p_rank</code> and <code class="highlighter-rouge">o_rank</code> (for ‚Äúplayer‚Äù and ‚Äúopponent‚Äù). A new <code class="highlighter-rouge">win</code> feature marks whether <code class="highlighter-rouge">p</code> or <code class="highlighter-rouge">o</code> wins.</p>

<p>Later on, we‚Äôll use each match‚Äôs <code class="highlighter-rouge">unique_id</code> to randomly select one from each pair of duplicates, resulting in a more realistic dataset in which the ‚Äúwin‚Äù column is about half 1 and half 0. This whole scheme was just my own first pass at dealing with the issue, which I haven‚Äôt seen discussed in the papers I‚Äôve read; it‚Äôs very possible that there‚Äôs something fundamental I‚Äôm missing here, so I‚Äôd like to return to this issue and see if I can find discussion of it in other parts of the statistics/sports analytics world. My results so far seem to suggest that this approach worked, though.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create a table that lists each match twice with W/L info for prediction purposes
</span>
<span class="n">p_cols</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'tourney_id'</span><span class="p">,</span> <span class="c1"># Id of Tournament
</span>    <span class="s">'tourney_name'</span><span class="p">,</span> <span class="c1"># Name of the Tournament
</span>    <span class="s">'surface'</span><span class="p">,</span> <span class="c1"># Surface of the Court (Hard, Clay, Grass)
</span>    <span class="s">'draw_size'</span><span class="p">,</span> <span class="c1"># Number of people in the tournament
</span>    <span class="s">'tourney_level'</span><span class="p">,</span> <span class="c1"># Level of the tournament (A=ATP Tour, D=Davis Cup, G=Grand Slam, M=Masters)
</span>    <span class="s">'tourney_date'</span><span class="p">,</span> <span class="c1"># Start date of tournament
</span>    <span class="s">'match_num'</span><span class="p">,</span> <span class="c1"># Match number
</span>    <span class="s">'p_id'</span><span class="p">,</span> <span class="c1"># Id of winner
</span>    <span class="s">'p_seed'</span><span class="p">,</span> <span class="c1"># Seed of winner
</span>    <span class="s">'p_entry'</span><span class="p">,</span> <span class="c1"># How the winner entered the tournament
</span>    <span class="s">'p_name'</span><span class="p">,</span> <span class="c1"># Name of winner
</span>    <span class="s">'p_hand'</span><span class="p">,</span> <span class="c1"># Dominant hand of winner (L=Left, R=Right, U=Unknown?)
</span>    <span class="s">'p_ht'</span><span class="p">,</span> <span class="c1"># Height in cm of winner
</span>    <span class="s">'p_ioc'</span><span class="p">,</span> <span class="c1"># Country of winner
</span>    <span class="s">'p_age'</span><span class="p">,</span> <span class="c1"># Age of winner
</span>    <span class="s">'p_rank'</span><span class="p">,</span> <span class="c1"># Rank of winner
</span>    <span class="s">'p_rank_points'</span><span class="p">,</span> <span class="c1"># Rank points of winner
</span>    <span class="s">'o_id'</span><span class="p">,</span>
    <span class="s">'o_seed'</span><span class="p">,</span>
    <span class="s">'o_entry'</span><span class="p">,</span>
    <span class="s">'o_name'</span><span class="p">,</span>
    <span class="s">'o_hand'</span><span class="p">,</span>
    <span class="s">'o_ht'</span><span class="p">,</span>
    <span class="s">'o_ioc'</span><span class="p">,</span>
    <span class="s">'o_age'</span><span class="p">,</span>
    <span class="s">'o_rank'</span><span class="p">,</span>
    <span class="s">'o_rank_points'</span><span class="p">,</span>
    <span class="s">'score'</span><span class="p">,</span> <span class="c1"># Score
</span>    <span class="s">'best_of'</span><span class="p">,</span> <span class="c1"># Best of X number of sets
</span>    <span class="s">'round'</span><span class="p">,</span> <span class="c1"># Round
</span>    <span class="s">'minutes'</span><span class="p">,</span> <span class="c1"># Match length in minutes
</span>    <span class="s">'p_ace'</span><span class="p">,</span> <span class="c1"># Number of aces for winner
</span>    <span class="s">'p_df'</span><span class="p">,</span> <span class="c1"># Number of double faults for winner
</span>    <span class="s">'p_svpt'</span><span class="p">,</span> <span class="c1"># Number of service points played by winner 'w_2ndWon' / ('w_svpt' - 'w_1stIn' - 'w_df')
</span>    <span class="s">'p_1stIn'</span><span class="p">,</span> <span class="c1"># Number of first serves in for winner
</span>    <span class="s">'p_1stWon'</span><span class="p">,</span> <span class="c1"># Number of first serve points won for winner
</span>    <span class="s">'p_2ndWon'</span><span class="p">,</span> <span class="c1"># Number of second serve points won for winner
</span>    <span class="s">'p_SvGms'</span><span class="p">,</span> <span class="c1"># Number of service games played by winner
</span>    <span class="s">'p_bpSaved'</span><span class="p">,</span> <span class="c1"># Number of break points saved by winner
</span>    <span class="s">'p_bpFaced'</span><span class="p">,</span> <span class="c1"># Number of break points faced by winner
</span>    <span class="s">'o_ace'</span><span class="p">,</span>
    <span class="s">'o_df'</span><span class="p">,</span>
    <span class="s">'o_svpt'</span><span class="p">,</span>
    <span class="s">'o_1stIn'</span><span class="p">,</span>
    <span class="s">'o_1stWon'</span><span class="p">,</span>
    <span class="s">'o_2ndWon'</span><span class="p">,</span>
    <span class="s">'o_SvGms'</span><span class="p">,</span>
    <span class="s">'o_bpSaved'</span><span class="p">,</span>
    <span class="s">'o_bpFaced'</span><span class="p">,</span>
    <span class="c1">#'is_gs', # a flag I was setting for grand slam matches; 'best_of' works just as well since the men play 5 sets
</span>    <span class="s">'p_1st%'</span><span class="p">,</span>
    <span class="s">'o_1st%'</span><span class="p">,</span>
    <span class="s">'p_1stRatio'</span><span class="p">,</span>
    <span class="s">'o_1stRatio'</span><span class="p">,</span>
    <span class="s">'p_2ndRatio'</span><span class="p">,</span>
    <span class="s">'o_2ndRatio'</span><span class="p">,</span>
    <span class="s">'unique_id'</span>
<span class="p">]</span>

<span class="n">o_cols</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">p_cols</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">'p_'</span><span class="p">:</span>
        <span class="n">o_cols</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'p_'</span><span class="p">,</span> <span class="s">'o_'</span><span class="p">))</span>
    <span class="k">elif</span> <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">'o_'</span><span class="p">:</span>
        <span class="n">o_cols</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'o_'</span><span class="p">,</span> <span class="s">'p_'</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">o_cols</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>

<span class="n">winner_data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'date_parsed'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">winner_data</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">p_cols</span>
<span class="n">winner_data</span><span class="p">[</span><span class="s">'win'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">winner_data</span><span class="p">[</span><span class="s">'date_parsed'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'date_parsed'</span><span class="p">]</span>

<span class="n">loser_data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'date_parsed'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">loser_data</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">o_cols</span>
<span class="n">loser_data</span><span class="p">[</span><span class="s">'win'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
<span class="n">loser_data</span><span class="p">[</span><span class="s">'date_parsed'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'date_parsed'</span><span class="p">]</span>

<span class="c1"># in this frame, you can find all of a single player's matches by grabbing df['p_*']
</span><span class="n">total_data</span> <span class="o">=</span> <span class="n">winner_data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">loser_data</span><span class="p">)</span>
<span class="n">total_data</span> <span class="o">=</span> <span class="n">total_data</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'score'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">total_data</span> <span class="o">=</span> <span class="n">total_data</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">'date_parsed'</span><span class="p">).</span><span class="n">sort_index</span><span class="p">()</span>

<span class="n">player_names</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'winner_name'</span><span class="p">].</span><span class="n">values</span><span class="p">).</span><span class="n">union</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'loser_name'</span><span class="p">])))</span>
</code></pre></div></div>

<h2 id="training">Training</h2>

<p>To train a model, we obviously can‚Äôt use any data that isn‚Äôt known prior to the match; instead, we need to collect various stats for each of the players in their previous matches. This requires one of those things you‚Äôre not supposed to do in pandas ‚Äì iteration. *cue scary music*. The basic idea is to go through each match in the dataset and, for each player, grab all of the matches from the past year. Iteration is essentially unavoidable when the data is structured as it is; there‚Äôs no easy way around doing a new round of data processing for each match in the dataset, since we need to select only the matches featuring the current players each time. (Though a different initial organization could make things faster, as I discuss briefly below)</p>

<p>The actual period over which to collect data is an important question, since it depends on your theory of how to predict upsets. Is very recent performance most important? The past six months? year? The models I‚Äôve seen tend to use a year‚Äôs worth of data, and to be honest I haven‚Äôt seen a lot of difference between timespans ranging from six months to a year, but I consider it an open question. An even better version of the question would probably be whether to take a longer interval but weigh more recent matches more heavily, something I haven‚Äôt tried but will consider in the future.</p>

<p>The training process currently takes about 3 hours for sixteen years of matches. I begin training at the start of 2001, since each training datapoint requires a year‚Äôs worth of matches. The worst inefficiency aside from the iteration itself is the fact that I‚Äôm really computing everything twice, for the two permutations of each match. I don‚Äôt think it would be terribly hard to fix this, but it would make the code a little less intuitive, and so far it hasn‚Äôt been an inconvenience to wait it out. Probably the best way to improve efficiency would be to reorganize the data significantly, making a separate table for each player and then generating the actual training data by merging it all back together on the basis of the match IDs. Another improvement for the next iteration.</p>

<p>Most of the specific features that I generate in this step are intuitive, but there are a couple that are very experimental, where I‚Äôve tried to produce metrics for each player‚Äôs upset-ibility (or ability to hold to their rank) and ability to produce upsets. This involves taking the average of the player‚Äôs rank divided by the opponent‚Äôs rank for all of the times they succumbed to/produced an upset. It‚Äôs a work in progress, designed in particular to capture how upset-prone players are; it‚Äôs far from perfect, since, for example, a player who is ranked #1 for a long period will only ever be upset, though in principle their upsettee factor shouldn‚Äôt be too bad if they manage to beat lower ranked players and lose mainly to, say, top-10 players. But I plan to experiment with this further, since it seems to me that there must be some way to do some more advanced feature engineering to better capture some basic intuitions about upsets.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># add: aces per match (trying to capture more about serve strength)
</span>
<span class="n">training_data</span> <span class="o">=</span> <span class="n">total_data</span><span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">training_year</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s">'-01-01'</span><span class="p">:][[</span><span class="s">'unique_id'</span><span class="p">,</span>
                                           <span class="s">'round'</span><span class="p">,</span>
                                           <span class="s">'best_of'</span><span class="p">,</span>
                                           <span class="s">'surface'</span><span class="p">,</span>
                                           <span class="s">'p_name'</span><span class="p">,</span>
                                           <span class="s">'p_ht'</span><span class="p">,</span>
                                           <span class="s">'p_rank'</span><span class="p">,</span>
                                           <span class="s">'p_hand'</span><span class="p">,</span>
                                           <span class="s">'o_name'</span><span class="p">,</span>
                                           <span class="s">'o_ht'</span><span class="p">,</span>
                                           <span class="s">'o_rank'</span><span class="p">,</span>
                                           <span class="s">'o_hand'</span><span class="p">,</span>
                                           <span class="s">'win'</span><span class="p">]].</span><span class="n">copy</span><span class="p">()</span>
<span class="n">training_data</span><span class="p">[</span><span class="s">'date_time'</span><span class="p">]</span> <span class="o">=</span> <span class="n">training_data</span><span class="p">.</span><span class="n">index</span>
<span class="n">training_data</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">training_data</span><span class="p">))</span>
<span class="n">training_timestamps</span> <span class="o">=</span> <span class="n">training_data</span><span class="p">[[</span><span class="s">'date_time'</span><span class="p">,</span>
                                     <span class="s">'p_name'</span><span class="p">,</span>
                                     <span class="s">'o_name'</span><span class="p">,</span>
                                     <span class="s">'best_of'</span><span class="p">,</span>
                                     <span class="s">'surface'</span><span class="p">,</span>
                                     <span class="s">'round'</span><span class="p">,</span>
                                     <span class="s">'p_hand'</span><span class="p">,</span>
                                     <span class="s">'o_hand'</span><span class="p">]].</span><span class="n">copy</span><span class="p">()</span>

<span class="n">total_matches</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">training_timestamps</span><span class="p">)</span>
<span class="n">how_many</span> <span class="o">=</span> <span class="n">total_matches</span>

<span class="k">for</span> <span class="n">match</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">training_timestamps</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:</span><span class="n">how_many</span><span class="p">].</span><span class="n">itertuples</span><span class="p">(),</span> <span class="n">total</span><span class="o">=</span><span class="n">how_many</span><span class="p">):</span>
    <span class="n">timestamp</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">date_time</span>
    <span class="n">prevMatch</span> <span class="o">=</span> <span class="n">timestamp</span> <span class="o">-</span> <span class="n">datetime</span><span class="p">.</span><span class="n">timedelta</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">yearAgo</span> <span class="o">=</span> <span class="n">prevMatch</span> <span class="o">-</span> <span class="n">datetime</span><span class="p">.</span><span class="n">timedelta</span><span class="p">(</span><span class="mi">120</span><span class="p">)</span>

    <span class="n">p_matches</span> <span class="o">=</span> <span class="n">total_data</span><span class="p">[</span><span class="n">total_data</span><span class="p">[</span><span class="s">'p_name'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">p_name</span><span class="p">)]</span>
    <span class="n">p_matches</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="n">yearAgo</span><span class="p">:</span><span class="n">prevMatch</span><span class="p">]</span>

    <span class="n">o_matches</span> <span class="o">=</span> <span class="n">total_data</span><span class="p">[</span><span class="n">total_data</span><span class="p">[</span><span class="s">'p_name'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">o_name</span><span class="p">)]</span>
    <span class="n">o_matches</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="n">yearAgo</span><span class="p">:</span><span class="n">prevMatch</span><span class="p">]</span>

    <span class="n">bestof</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">best_of</span>
    <span class="n">this_round</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="nb">round</span>
    <span class="n">this_surface</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">surface</span>
    <span class="n">this_p_hand</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">p_hand</span>
    <span class="n">this_o_hand</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">o_hand</span>
    <span class="n">this_p_name</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">p_name</span>
    <span class="n">this_o_name</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">o_name</span>

    <span class="c1">### P stats
</span>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">p_matches</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">p_rank_change</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">p_rank</span> <span class="o">-</span> <span class="n">p_matches</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">p_rank</span>

        <span class="n">p_record</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'win'</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>

        <span class="n">p_matches_played</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">p_matches</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">this_o_name</span> <span class="ow">in</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'o_name'</span><span class="p">].</span><span class="n">to_numpy</span><span class="p">():</span>
            <span class="n">p_H2H</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="n">p_matches</span><span class="p">.</span><span class="n">o_name</span> <span class="o">==</span> <span class="n">this_o_name</span><span class="p">].</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">p_H2H</span> <span class="o">=</span> <span class="mf">0.5</span>

        <span class="k">if</span> <span class="n">this_o_hand</span> <span class="ow">in</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'o_hand'</span><span class="p">].</span><span class="n">to_numpy</span><span class="p">():</span>
            <span class="n">p_win_o_hand</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="n">p_matches</span><span class="p">.</span><span class="n">o_hand</span> <span class="o">==</span> <span class="n">this_o_hand</span><span class="p">].</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">p_win_o_hand</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">if</span> <span class="n">bestof</span> <span class="ow">in</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'best_of'</span><span class="p">].</span><span class="n">to_numpy</span><span class="p">():</span>
            <span class="n">p_win_bestof</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="n">p_matches</span><span class="p">.</span><span class="n">best_of</span> <span class="o">==</span> <span class="n">bestof</span><span class="p">].</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">p_win_bestof</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">if</span> <span class="n">this_round</span> <span class="ow">in</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'round'</span><span class="p">].</span><span class="n">to_numpy</span><span class="p">():</span>
            <span class="n">p_win_round</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="n">p_matches</span><span class="p">[</span><span class="s">'round'</span><span class="p">]</span> <span class="o">==</span> <span class="n">this_round</span><span class="p">].</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">p_win_round</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">if</span> <span class="n">this_surface</span> <span class="ow">in</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'surface'</span><span class="p">].</span><span class="n">to_numpy</span><span class="p">():</span>
            <span class="n">p_win_surface</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="n">p_matches</span><span class="p">.</span><span class="n">surface</span> <span class="o">==</span> <span class="n">this_surface</span><span class="p">].</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">p_win_surface</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">if</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'p_df'</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">p_ace_to_df</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'p_ace'</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'p_df'</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">p_ace_to_df</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="c1"># One problem is low-ranked players who have a number of matches (incl wins) but have never
</span>        <span class="c1"># beaten someone ranked lower than them
</span>        <span class="n">p_upperdog</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="n">p_matches</span><span class="p">.</span><span class="n">p_rank</span> <span class="o">&lt;</span> <span class="n">p_matches</span><span class="p">.</span><span class="n">o_rank</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">p_upperdog</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">p_upperdog_wl</span> <span class="o">=</span> <span class="n">p_upperdog</span><span class="p">.</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>

            <span class="n">p_favored_losses</span> <span class="o">=</span> <span class="n">p_upperdog</span><span class="p">[</span><span class="n">p_upperdog</span><span class="p">.</span><span class="n">win</span> <span class="o">==</span> <span class="bp">False</span><span class="p">]</span>
            <span class="n">p_f_upset_weight</span> <span class="o">=</span> <span class="n">p_favored_losses</span><span class="p">[</span><span class="s">'o_rank'</span><span class="p">]</span> <span class="o">/</span> <span class="n">p_favored_losses</span><span class="p">[</span><span class="s">'p_rank'</span><span class="p">]</span>
            <span class="n">p_upsettee_factor</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">p_f_upset_weight</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">p_upperdog_wl</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="n">p_upsettee_factor</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="c1"># this still matters because someone could be ranked no 1 for a  whole year and never be underdog
</span>        <span class="n">p_underdog</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="n">p_matches</span><span class="p">.</span><span class="n">p_rank</span> <span class="o">&gt;</span> <span class="n">p_matches</span><span class="p">.</span><span class="n">o_rank</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">p_underdog</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">p_underdog_wl</span> <span class="o">=</span> <span class="n">p_underdog</span><span class="p">.</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>

            <span class="n">p_underdog_wins</span> <span class="o">=</span> <span class="n">p_underdog</span><span class="p">[</span><span class="n">p_underdog</span><span class="p">.</span><span class="n">win</span><span class="p">]</span>
            <span class="n">p_u_upset_weight</span> <span class="o">=</span> <span class="n">p_underdog_wins</span><span class="p">[</span><span class="s">'p_rank'</span><span class="p">]</span> <span class="o">/</span> <span class="n">p_underdog_wins</span><span class="p">[</span><span class="s">'o_rank'</span><span class="p">]</span>
            <span class="n">p_upset_factor</span> <span class="o">=</span> <span class="n">p_u_upset_weight</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">p_underdog_wl</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="n">p_upset_factor</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="c1"># Aggregating the standard stats
</span>
        <span class="n">p_bpFacedPerSet</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">.</span><span class="n">p_bpFaced</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">p_matches</span><span class="p">.</span><span class="n">best_of</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span> <span class="c1"># see below for alternative approx
</span>        <span class="c1">#bpFacedPerSet = sum(t_matches.p_bpFaced / t_matches.best_of) / len(t_matches)
</span>
        <span class="n">p_bpSavedPerSet</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">.</span><span class="n">p_bpSaved</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">p_matches</span><span class="p">.</span><span class="n">best_of</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span>

        <span class="n">p_first_in_pct</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'p_1st%'</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
        <span class="n">p_first_won</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'p_1stRatio'</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
        <span class="n">p_second_won</span> <span class="o">=</span> <span class="n">p_matches</span><span class="p">[</span><span class="s">'p_2ndRatio'</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Need to go back and postprocess to fill these with appropriate values
</span>        <span class="n">p_rank_change</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># don't fill
</span>        <span class="n">p_record</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">p_matches_played</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">p_upperdog_wl</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># fill with median
</span>        <span class="n">p_underdog_wl</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># fill with median
</span>        <span class="n">p_upset_factor</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># fill with min
</span>        <span class="n">p_upsettee_factor</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># fill with max?
</span>        <span class="n">p_bpFacedPerSet</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">p_bpSavedPerSet</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">p_first_in_pct</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">p_first_won</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">p_second_won</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">p_ace_to_df</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_record'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_record</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_matches_played'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_matches_played</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_rank_change'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_rank_change</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_H2H'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_H2H</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_win_o_hand'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_win_o_hand</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_win_bestof'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_win_bestof</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_win_round'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_win_round</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_win_surface'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_win_surface</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_upperdog_wl'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_upperdog_wl</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_underdog_wl'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_underdog_wl</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_upset_factor'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_upset_factor</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_upsettee_factor'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_upsettee_factor</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_bpFacedPerSet'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_bpFacedPerSet</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_bpSavedPerSet'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_bpSavedPerSet</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_first_in_pct'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_first_in_pct</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_first_won'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_first_won</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_second_won'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_second_won</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'p_ace_to_df'</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_ace_to_df</span>


    <span class="c1">### O stats
</span>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">o_matches</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">o_rank_change</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">p_rank</span> <span class="o">-</span> <span class="n">o_matches</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">p_rank</span>

        <span class="n">o_record</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'win'</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>

        <span class="n">o_matches_played</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">o_matches</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">this_p_name</span> <span class="ow">in</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'o_name'</span><span class="p">].</span><span class="n">to_numpy</span><span class="p">():</span>
            <span class="n">o_H2H</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="n">o_matches</span><span class="p">.</span><span class="n">o_name</span> <span class="o">==</span> <span class="n">this_p_name</span><span class="p">].</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">o_H2H</span> <span class="o">=</span> <span class="mf">0.5</span>

        <span class="k">if</span> <span class="n">this_p_hand</span> <span class="ow">in</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'o_hand'</span><span class="p">].</span><span class="n">to_numpy</span><span class="p">():</span>
            <span class="n">o_win_p_hand</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="n">o_matches</span><span class="p">.</span><span class="n">o_hand</span> <span class="o">==</span> <span class="n">this_p_hand</span><span class="p">].</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">o_win_p_hand</span> <span class="o">=</span> <span class="mf">0.5</span>

        <span class="k">if</span> <span class="n">bestof</span> <span class="ow">in</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'best_of'</span><span class="p">].</span><span class="n">to_numpy</span><span class="p">():</span>
            <span class="n">o_win_bestof</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="n">o_matches</span><span class="p">.</span><span class="n">best_of</span> <span class="o">==</span> <span class="n">bestof</span><span class="p">].</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">o_win_bestof</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">if</span> <span class="n">this_round</span> <span class="ow">in</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'round'</span><span class="p">].</span><span class="n">to_numpy</span><span class="p">():</span>
            <span class="n">o_win_round</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="n">o_matches</span><span class="p">[</span><span class="s">'round'</span><span class="p">]</span> <span class="o">==</span> <span class="n">this_round</span><span class="p">].</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">o_win_round</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">if</span> <span class="n">this_surface</span> <span class="ow">in</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'surface'</span><span class="p">].</span><span class="n">to_numpy</span><span class="p">():</span>
            <span class="n">o_win_surface</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="n">o_matches</span><span class="p">.</span><span class="n">surface</span> <span class="o">==</span> <span class="n">this_surface</span><span class="p">].</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">o_win_surface</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">if</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'p_df'</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">o_ace_to_df</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'p_ace'</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'p_df'</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">o_ace_to_df</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="n">o_upperdog</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="n">o_matches</span><span class="p">.</span><span class="n">p_rank</span> <span class="o">&lt;</span> <span class="n">o_matches</span><span class="p">.</span><span class="n">o_rank</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">o_upperdog</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">o_upperdog_wl</span> <span class="o">=</span> <span class="n">o_upperdog</span><span class="p">.</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>

            <span class="n">o_favored_losses</span> <span class="o">=</span> <span class="n">o_upperdog</span><span class="p">[</span><span class="n">o_upperdog</span><span class="p">.</span><span class="n">win</span> <span class="o">==</span> <span class="bp">False</span><span class="p">]</span>
            <span class="n">o_f_upset_weight</span> <span class="o">=</span> <span class="n">o_favored_losses</span><span class="p">[</span><span class="s">'o_rank'</span><span class="p">]</span> <span class="o">/</span> <span class="n">o_favored_losses</span><span class="p">[</span><span class="s">'p_rank'</span><span class="p">]</span>
            <span class="n">o_upsettee_factor</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">o_f_upset_weight</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">o_upperdog_wl</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="n">o_upsettee_factor</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># this is technically a high number...
</span>
        <span class="n">o_underdog</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="n">o_matches</span><span class="p">.</span><span class="n">p_rank</span> <span class="o">&gt;</span> <span class="n">o_matches</span><span class="p">.</span><span class="n">o_rank</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">o_underdog</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">o_underdog_wl</span> <span class="o">=</span> <span class="n">o_underdog</span><span class="p">.</span><span class="n">win</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>

            <span class="c1"># need to do some fixing of these
</span>            <span class="n">o_underdog_wins</span> <span class="o">=</span> <span class="n">o_underdog</span><span class="p">[</span><span class="n">o_underdog</span><span class="p">.</span><span class="n">win</span><span class="p">]</span>
            <span class="n">o_u_upset_weight</span> <span class="o">=</span> <span class="n">o_underdog_wins</span><span class="p">[</span><span class="s">'p_rank'</span><span class="p">]</span> <span class="o">/</span> <span class="n">o_underdog_wins</span><span class="p">[</span><span class="s">'o_rank'</span><span class="p">]</span>
            <span class="n">o_upset_factor</span> <span class="o">=</span> <span class="n">o_u_upset_weight</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">o_underdog_wl</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="n">o_upset_factor</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="c1"># Aggregating the standard stats
</span>
        <span class="n">o_bpFacedPerSet</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">.</span><span class="n">p_bpFaced</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">o_matches</span><span class="p">.</span><span class="n">best_of</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span> <span class="c1"># see below for alternative approx
</span>        <span class="c1">#bpFacedPerSet = sum(t_matches.p_bpFaced / t_matches.best_of) / len(t_matches)
</span>
        <span class="n">o_bpSavedPerSet</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">.</span><span class="n">p_bpSaved</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">o_matches</span><span class="p">.</span><span class="n">best_of</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span>

        <span class="n">o_first_in_pct</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'p_1st%'</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
        <span class="n">o_first_won</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'p_1stRatio'</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
        <span class="n">o_second_won</span> <span class="o">=</span> <span class="n">o_matches</span><span class="p">[</span><span class="s">'p_2ndRatio'</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Need to go back and postprocess to fill these with appropriate values
</span>        <span class="n">o_rank_change</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># don't fill
</span>        <span class="n">o_record</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">o_matches_played</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">o_upperdog_wl</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># fill with median
</span>        <span class="n">o_underdog_wl</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># fill with median
</span>        <span class="n">o_upset_factor</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># fill with min
</span>        <span class="n">o_upsettee_factor</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># fill with max?
</span>        <span class="n">o_bpFacedPerSet</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">o_bpSavedPerSet</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">o_first_in_pct</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">o_first_won</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">o_second_won</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">o_ace_to_df</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_record'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_record</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_matches_played'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_matches_played</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_rank_change'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_rank_change</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_H2H'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_H2H</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_win_p_hand'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_win_p_hand</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_win_bestof'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_win_bestof</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_win_round'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_win_round</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_win_surface'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_win_surface</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_upperdog_wl'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_upperdog_wl</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_underdog_wl'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_underdog_wl</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_upset_factor'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_upset_factor</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_upsettee_factor'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_upsettee_factor</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_bpFacedPerSet'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_bpFacedPerSet</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_bpSavedPerSet'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_bpSavedPerSet</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_first_in_pct'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_first_in_pct</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_first_won'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_first_won</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_second_won'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_second_won</span>
    <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">match</span><span class="p">.</span><span class="n">Index</span><span class="p">,</span> <span class="s">'o_ace_to_df'</span><span class="p">]</span> <span class="o">=</span> <span class="n">o_ace_to_df</span>


<span class="c1"># Fill NaN values for players who hadn't yet played a match or have never upset/been upset
</span>
<span class="n">training_data</span><span class="p">.</span><span class="n">p_upperdog_wl</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_upperdog_wl</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># fill with median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_underdog_wl</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_underdog_wl</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># fill with median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_upset_factor</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_upset_factor</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># fill with min
</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_upsettee_factor</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_upsettee_factor</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># fill with max?
</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_bpFacedPerSet</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_bpFacedPerSet</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_bpSavedPerSet</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_bpSavedPerSet</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_first_in_pct</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_first_in_pct</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_first_won</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_first_won</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_second_won</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_second_won</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_ace_to_df</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">p_ace_to_df</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span>
<span class="n">training_data</span><span class="p">.</span><span class="n">o_upperdog_wl</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_upperdog_wl</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># fill with median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_underdog_wl</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_underdog_wl</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># fill with median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_upset_factor</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_upset_factor</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># fill with min
</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_upsettee_factor</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_upsettee_factor</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># fill with max?
</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_bpFacedPerSet</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_bpFacedPerSet</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_bpSavedPerSet</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_bpSavedPerSet</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_first_in_pct</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_first_in_pct</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_first_won</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_first_won</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_second_won</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_second_won</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_ace_to_df</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">o_ace_to_df</span><span class="p">.</span><span class="n">median</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># median
</span>
<span class="n">DOBs</span> <span class="o">=</span> <span class="n">atp_players</span><span class="p">[[</span><span class="s">'full_name'</span><span class="p">,</span> <span class="s">'DOB'</span><span class="p">]].</span><span class="n">set_index</span><span class="p">(</span><span class="s">'full_name'</span><span class="p">,</span> <span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">training_data</span> <span class="o">=</span> <span class="n">training_data</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">DOBs</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s">'p_name'</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s">'left'</span><span class="p">)</span>
<span class="n">training_data</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'DOB'</span><span class="p">:</span><span class="s">'p_DOB'</span><span class="p">},</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">training_data</span> <span class="o">=</span> <span class="n">training_data</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">DOBs</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s">'o_name'</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s">'left'</span><span class="p">)</span>
<span class="n">training_data</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'DOB'</span><span class="p">:</span><span class="s">'o_DOB'</span><span class="p">},</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">training_data</span><span class="p">[</span><span class="s">'p_age'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">date_time</span> <span class="o">-</span> <span class="n">training_data</span><span class="p">.</span><span class="n">p_DOB</span><span class="p">).</span><span class="n">dt</span><span class="p">.</span><span class="n">days</span> <span class="o">/</span> <span class="mf">365.25</span>
<span class="n">training_data</span><span class="p">[</span><span class="s">'o_age'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">training_data</span><span class="p">.</span><span class="n">date_time</span> <span class="o">-</span> <span class="n">training_data</span><span class="p">.</span><span class="n">o_DOB</span><span class="p">).</span><span class="n">dt</span><span class="p">.</span><span class="n">days</span> <span class="o">/</span> <span class="mf">365.25</span>
<span class="n">training_data</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_DOB'</span><span class="p">,</span><span class="s">'o_DOB'</span><span class="p">],</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">training_data</span> <span class="o">=</span> <span class="n">training_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">testDf</span><span class="p">[</span><span class="s">'p_age'</span><span class="p">].</span><span class="n">notna</span><span class="p">()</span> <span class="o">&amp;</span> <span class="n">training_data</span><span class="p">[</span><span class="s">'o_age'</span><span class="p">].</span><span class="n">notna</span><span class="p">()]</span>

<span class="c1"># Save the resulting data
</span><span class="n">training_data</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s">"./atp_data/atp_training_2000-2015_exp_365.csv"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># This is just here so we can load saved data without running the training loop
</span><span class="n">training_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"./atp_data/atp_training_2000-2015_exp_120.csv"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="preprocessing-and-more-feature-engineering">Preprocessing and more feature engineering</h2>

<p>From the full training set, we need to filter out half of the matches, randomly choosing between the permutation where <code class="highlighter-rouge">p</code> wins and the one where <code class="highlighter-rouge">o</code> wins.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">training_data_filtered</span> <span class="o">=</span> <span class="n">training_data</span><span class="p">.</span><span class="n">sort_values</span><span class="p">([</span><span class="s">'date_time'</span><span class="p">,</span><span class="s">'unique_id'</span><span class="p">]).</span><span class="n">reset_index</span><span class="p">().</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'index'</span><span class="p">])</span>

<span class="c1"># [0347]
</span><span class="n">iloc_index</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">training_data</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)):</span>
    <span class="n">iloc_index</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>

<span class="n">training_data_filtered</span> <span class="o">=</span> <span class="n">training_data_filtered</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">iloc_index</span><span class="p">,:]</span>
<span class="nb">len</span><span class="p">(</span><span class="n">training_data_filtered</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>40940
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># This is just a way to grab subsets of the training data if we want to try training on smaller date ranges
</span><span class="n">training_slice</span> <span class="o">=</span> <span class="n">training_data_filtered</span><span class="c1">#[(training_data_filtered.date_time &gt; '2008-01-01') &amp; (training_data_filtered.date_time &lt; '2014-01-01')]
</span></code></pre></div></div>

<p>There are a couple steps involved in preprocessing the data. We drop unhelpful information like name, date, and some of the categorical variables like handedness and surface. These latter two are incorporated into the model via features that capture each player‚Äôs record on the current surface, or against lefties/righties, which should capture more information than the raw categorical value (I‚Äôve left the categorical encoder intact in the code in case I want to experiment with reviving these features). Features like <code class="highlighter-rouge">best_of</code> and <code class="highlighter-rouge">round</code> are also captured via ratios capturing a player‚Äôs performance in matches corresponding to the various categories, though at present this means the clever encoding for the number of rounds remaining is going unused.</p>

<p>Most of the rest of the features are present for both <code class="highlighter-rouge">p</code> and <code class="highlighter-rouge">o</code>, and rather than simply toss both values into the model, I opted to turn them into ratios, in order to give the model a measure of the relation between the two players‚Äô strength in each category. Some features occasionally take zero as a value (as when a player hasn‚Äôt played a match on a given surface in the past year), so I‚Äôve used ratios of (1 + p) / (1 + n); this is an aspect of feature engineering that I‚Äôm still learning about and experimenting with, as there may be a better practice or a different way to encode these features that I don‚Äôt know about. But later testing seems to show that these modified ratios do provide the model with a lot of useful information.</p>

<p>You can see that I‚Äôve left out a few features, which is a result of some experimentation with which combinations give the best results, though there may be more improvements to be made just in terms of selecting among the current features. The other important thing in this block of code is the scaler, which makes the data friendlier for certain modeling methods and allows for easier comparisons.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">cross_val_score</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">GridSearchCV</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="nn">sklearn.pipeline</span> <span class="kn">import</span> <span class="n">Pipeline</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">LabelEncoder</span>
<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">GradientBoostingClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">ExtraTreesClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn.tree</span> <span class="kn">import</span> <span class="n">DecisionTreeClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">tree</span>

<span class="n">categorical_transformer</span> <span class="o">=</span> <span class="n">LabelEncoder</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">preprocess_df</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>

    <span class="n">X</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_name'</span><span class="p">,</span>
                                             <span class="s">'o_name'</span><span class="p">,</span>
                                             <span class="s">'date_time'</span><span class="p">,</span>
                                             <span class="s">'p_hand'</span><span class="p">,</span>
                                             <span class="s">'o_hand'</span><span class="p">,</span>
                                             <span class="s">'surface'</span><span class="p">,</span>
                                             <span class="s">'best_of'</span><span class="p">,</span>
                                             <span class="s">'round'</span><span class="p">,</span>
                                             <span class="s">'Unnamed: 0'</span><span class="p">,</span> <span class="c1"># this is only for when loading from csv
</span>                                             <span class="s">'o_H2H'</span><span class="p">,</span>
                                             <span class="s">'unique_id'</span><span class="p">])</span>



    <span class="n">upset_Xp</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'p_rank'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">X</span><span class="p">[</span><span class="s">'o_rank'</span><span class="p">])</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'win'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">upset_Xo</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_rank'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">X</span><span class="p">[</span><span class="s">'p_rank'</span><span class="p">])</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'win'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="c1"># This is mostly so that 'upset' be used as a target, which in reality gives poor performance
</span>    <span class="n">X</span><span class="p">[</span><span class="s">'upset'</span><span class="p">]</span> <span class="o">=</span> <span class="n">upset_Xp</span> <span class="o">|</span> <span class="n">upset_Xo</span>

    <span class="n">y</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="s">'win'</span><span class="p">]</span>
    <span class="c1">#y = X['upset']
</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'win'</span><span class="p">,</span> <span class="s">'upset'</span><span class="p">])</span>

    <span class="c1"># age diff seems to work better than just including age
</span>    <span class="n">X</span><span class="p">[</span><span class="s">'age_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="s">'p_age'</span><span class="p">]</span> <span class="o">/</span> <span class="n">X</span><span class="p">[</span><span class="s">'o_age'</span><span class="p">]</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_age'</span><span class="p">,</span><span class="s">'o_age'</span><span class="p">])</span>

    <span class="c1"># Height ratio - need to train on this first
</span>    <span class="n">X</span><span class="p">[</span><span class="s">'ht_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="s">'p_ht'</span><span class="p">]</span> <span class="o">/</span> <span class="n">X</span><span class="p">[</span><span class="s">'o_ht'</span><span class="p">]</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_ht'</span><span class="p">,</span><span class="s">'o_ht'</span><span class="p">])</span>

    <span class="c1"># rank differential seems more informative!
</span>    <span class="n">X</span><span class="p">[</span><span class="s">'rank_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'p_rank'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_rank'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="c1">#X['rank_diff'] = X['p_rank']- X['o_rank']
</span>    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_rank'</span><span class="p">,</span><span class="s">'o_rank'</span><span class="p">])</span>

    <span class="c1"># A ratio or difference of rank changes doesn't tell us much, so I don't compute it and leave in the originals
</span>    <span class="c1">#X = X.drop(columns=['p_rank_change','o_rank_change'])
</span>
    <span class="n">X</span><span class="p">[</span><span class="s">'first_in_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="s">'p_first_in_pct'</span><span class="p">]</span> <span class="o">/</span> <span class="n">X</span><span class="p">[</span><span class="s">'o_first_in_pct'</span><span class="p">]</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_first_in_pct'</span><span class="p">,</span><span class="s">'o_first_in_pct'</span><span class="p">])</span>

    <span class="n">X</span><span class="p">[</span><span class="s">'surface_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">((</span><span class="n">X</span><span class="p">[</span><span class="s">'p_win_surface'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_win_surface'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_win_surface'</span><span class="p">,</span><span class="s">'o_win_surface'</span><span class="p">])</span>

    <span class="n">X</span><span class="p">[</span><span class="s">'firstW_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="s">'p_first_won'</span><span class="p">]</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_first_won'</span><span class="p">])</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_first_won'</span><span class="p">,</span><span class="s">'o_first_won'</span><span class="p">])</span>

    <span class="n">X</span><span class="p">[</span><span class="s">'secondW_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="s">'p_second_won'</span><span class="p">]</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_second_won'</span><span class="p">])</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_second_won'</span><span class="p">,</span><span class="s">'o_second_won'</span><span class="p">])</span>

    <span class="n">X</span><span class="p">[</span><span class="s">'bpFaced_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'p_bpFacedPerSet'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_bpFacedPerSet'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_bpFacedPerSet'</span><span class="p">,</span><span class="s">'o_bpFacedPerSet'</span><span class="p">])</span>

    <span class="n">X</span><span class="p">[</span><span class="s">'bpSaved_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'p_bpSavedPerSet'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_bpSavedPerSet'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_bpSavedPerSet'</span><span class="p">,</span><span class="s">'o_bpSavedPerSet'</span><span class="p">])</span>

    <span class="c1">#X['favored_ratio'] = np.log((X['p_upperdog_wl'] + 1) / (X['o_upperdog_wl'] + 1))
</span>    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_upperdog_wl'</span><span class="p">,</span><span class="s">'o_upperdog_wl'</span><span class="p">])</span>

    <span class="c1">#X['underdog_ratio'] = np.log((X['p_underdog_wl'] + 1) / (X['o_underdog_wl'] + 1))
</span>    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_underdog_wl'</span><span class="p">,</span><span class="s">'o_underdog_wl'</span><span class="p">])</span>

    <span class="n">X</span><span class="p">[</span><span class="s">'upset_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="s">'p_upset_factor'</span><span class="p">]</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_upset_factor'</span><span class="p">])</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_upset_factor'</span><span class="p">,</span><span class="s">'o_upset_factor'</span><span class="p">])</span>

    <span class="c1">#X['upsettee_ratio'] = np.log((X['p_upsettee_factor'] + 1) / (X['o_upsettee_factor'] + 1))
</span>    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_upsettee_factor'</span><span class="p">,</span><span class="s">'o_upsettee_factor'</span><span class="p">])</span>

    <span class="n">X</span><span class="p">[</span><span class="s">'matches_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'p_matches_played'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_matches_played'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_matches_played'</span><span class="p">,</span><span class="s">'o_matches_played'</span><span class="p">])</span>

    <span class="c1"># including record makes it a little harder to catch upsets but is good for accuracy
</span>    <span class="c1">#X['record_ratio'] = (X['p_record'] + 1) / (X['o_record'] + 1)
</span>    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_record'</span><span class="p">,</span><span class="s">'o_record'</span><span class="p">])</span>

    <span class="n">X</span><span class="p">[</span><span class="s">'hand_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'p_win_o_hand'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_win_p_hand'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_win_o_hand'</span><span class="p">,</span><span class="s">'o_win_p_hand'</span><span class="p">])</span>

    <span class="n">X</span><span class="p">[</span><span class="s">'round_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'p_win_round'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_win_round'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_win_round'</span><span class="p">,</span><span class="s">'o_win_round'</span><span class="p">])</span>

    <span class="n">X</span><span class="p">[</span><span class="s">'bestof_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'p_win_bestof'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_win_bestof'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_win_bestof'</span><span class="p">,</span><span class="s">'o_win_bestof'</span><span class="p">])</span>

    <span class="n">X</span><span class="p">[</span><span class="s">'ace_df_ratio'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'p_ace_to_df'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'o_ace_to_df'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'p_ace_to_df'</span><span class="p">,</span><span class="s">'o_ace_to_df'</span><span class="p">])</span>

    <span class="c1">#X['p_hand_cat'] = categorical_transformer.fit_transform(training_data_filtered['p_hand'])
</span>    <span class="c1">#X['o_hand_cat'] = categorical_transformer.transform(training_data_filtered['o_hand'])
</span>    <span class="c1">#X['surface_cat'] = categorical_transformer.fit_transform(training_data_filtered['surface'])
</span>    <span class="c1">#X['p_win_bestof'].fillna(0, inplace=True)
</span>    <span class="c1">#X['o_win_bestof'].fillna(0, inplace=True)
</span>    <span class="k">return</span> <span class="n">X</span><span class="p">,</span> <span class="n">y</span>

<span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">preprocess_df</span><span class="p">(</span><span class="n">training_slice</span><span class="p">)</span>

<span class="n">scaler</span> <span class="o">=</span> <span class="n">StandardScaler</span><span class="p">()</span>
<span class="n">X_t</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</code></pre></div></div>

<p>A little interlude here: some of these features are pretty heavily correlated, and it‚Äôs worth looking into how much they overlap in case we can remove features that are too closely tied to others to tell us anything new. Obviously things like first serve percentage and break points faced will tend to be correlated, as will things like record by surface and overall record; it‚Äôs still possible for features that are somewhat correlated to provide useful information, especially in predicting upsets, so this is a tricky issue and we don‚Äôt want to pull too many features that might still provide useful information. The heatmap below shows correlations among all the features, and the dendrogram clusters them hierarchically. One way of selecting features is to ‚Äòchop‚Äô the dendrogram at a particular level, and the set of features included here is one that I arrived at after a few rounds of chopping and swapping  (and is still a work in progress).</p>

<p>The version of the diagram that comes out post-feature engineering shows fewer strong intercorrelations than in the unmodified dataset, but I‚Äôve included it so you can get the basic idea.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">spearmanr</span>
<span class="kn">from</span> <span class="nn">scipy.cluster</span> <span class="kn">import</span> <span class="n">hierarchy</span>
<span class="kn">from</span> <span class="nn">sklearn.inspection</span> <span class="kn">import</span> <span class="n">permutation_importance</span>

<span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">corr</span> <span class="o">=</span> <span class="n">spearmanr</span><span class="p">(</span><span class="n">X_t</span><span class="p">).</span><span class="n">correlation</span>
<span class="n">corr_linkage</span> <span class="o">=</span> <span class="n">hierarchy</span><span class="p">.</span><span class="n">ward</span><span class="p">(</span><span class="n">corr</span><span class="p">)</span>
<span class="n">dendro</span> <span class="o">=</span> <span class="n">hierarchy</span><span class="p">.</span><span class="n">dendrogram</span><span class="p">(</span>
    <span class="n">corr_linkage</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">X</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">leaf_rotation</span><span class="o">=</span><span class="mi">90</span>
<span class="p">)</span>
<span class="n">dendro_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">dendro</span><span class="p">[</span><span class="s">'ivl'</span><span class="p">]))</span>

<span class="n">ax2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">corr</span><span class="p">[</span><span class="n">dendro</span><span class="p">[</span><span class="s">'leaves'</span><span class="p">],</span> <span class="p">:][:,</span> <span class="n">dendro</span><span class="p">[</span><span class="s">'leaves'</span><span class="p">]])</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">dendro_idx</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_yticks</span><span class="p">(</span><span class="n">dendro_idx</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_xticklabels</span><span class="p">(</span><span class="n">dendro</span><span class="p">[</span><span class="s">'ivl'</span><span class="p">],</span> <span class="n">rotation</span><span class="o">=</span><span class="s">'vertical'</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_yticklabels</span><span class="p">(</span><span class="n">dendro</span><span class="p">[</span><span class="s">'ivl'</span><span class="p">])</span>
<span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/posts/tennis/output_48_0.png" alt="png" /></p>

<h3 id="the-model">The model</h3>

<p>We‚Äôll keep things simple for now and just try out a couple of basic models: logistic regression and a random forest classifier. While I‚Äôve experimented a bit with tuning the hyperparameters, I‚Äôm not systematically optimizing them for the moment; I‚Äôm most interested for now in the general shape of the results. Logistic regression is perhaps the classic model for binary classification, and random forests are one of the best-performing all-around classifiers, so they‚Äôll make for a good starting point.</p>

<p>I‚Äôm using 8-fold cross validation here and simply measuring predictive accuracy, but in the next post I‚Äôll look more closely at each model‚Äôs confidence scores.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">'''rf_model = GradientBoostingClassifier(learning_rate=0.05,
                                   n_estimators=1000,
                                   #validation_fraction=0.1,
                                   #n_iter_no_change=3,
                                   random_state=0,
                                  )'''</span>


<span class="n">log_model</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">(</span><span class="n">max_iter</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
                           <span class="n">penalty</span><span class="o">=</span><span class="s">'l2'</span><span class="p">,</span>
                           <span class="c1">#l1_ratio=0.9,
</span>                           <span class="c1">#tol=0.0001,
</span>                           <span class="n">C</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
                           <span class="n">solver</span><span class="o">=</span><span class="s">'lbfgs'</span><span class="p">)</span>


<span class="n">rf_model</span> <span class="o">=</span> <span class="n">RandomForestClassifier</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
                               <span class="n">max_depth</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="c1"># this is best
</span>                               <span class="n">min_samples_split</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="c1"># this seems to be best
</span>                               <span class="n">min_samples_leaf</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="c1"># this seems to be best
</span>                               <span class="n">max_features</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                               <span class="n">max_leaf_nodes</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>

<span class="c1"># cross-val
</span><span class="n">log_score</span> <span class="o">=</span> <span class="n">cross_val_score</span><span class="p">(</span><span class="n">log_model</span><span class="p">,</span> <span class="n">X_t</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="n">rf_score</span> <span class="o">=</span> <span class="n">cross_val_score</span><span class="p">(</span><span class="n">rf_model</span><span class="p">,</span> <span class="n">X_t</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Logistic Regression Accuracy: 0.6580618022448217
Random Forest Accuracy: 0.6649989741800371
</code></pre></div></div>

<p>Before we peek at the scores themselves, let‚Äôs take a look at how the models treat the various features. Because the training data has all been scaled, the coefficients for the logistic regression are relatively easy to interpret ‚Äì the coefficients all measure the effect on the final prediction of proportional changes in the respective features.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">log_coefs</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="s">'coef'</span><span class="p">:</span> <span class="n">log_model</span><span class="p">.</span><span class="n">coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">'feature'</span><span class="p">:</span><span class="n">X</span><span class="p">.</span><span class="n">columns</span><span class="p">})</span>
<span class="n">log_coefs</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'coef'</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: center;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th>coef</th>
      <th>feature</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>5</th>
      <td>-1.124801</td>
      <td>rank_ratio</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-0.080605</td>
      <td>age_ratio</td>
    </tr>
    <tr>
      <th>16</th>
      <td>-0.055673</td>
      <td>bestof_ratio</td>
    </tr>
    <tr>
      <th>11</th>
      <td>-0.051398</td>
      <td>bpSaved_ratio</td>
    </tr>
    <tr>
      <th>10</th>
      <td>-0.039235</td>
      <td>bpFaced_ratio</td>
    </tr>
    <tr>
      <th>0</th>
      <td>-0.021280</td>
      <td>p_rank_change</td>
    </tr>
    <tr>
      <th>12</th>
      <td>-0.021194</td>
      <td>upset_ratio</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-0.004026</td>
      <td>ht_ratio</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.014083</td>
      <td>o_rank_change</td>
    </tr>
    <tr>
      <th>6</th>
      <td>0.052598</td>
      <td>first_in_ratio</td>
    </tr>
    <tr>
      <th>14</th>
      <td>0.063222</td>
      <td>hand_ratio</td>
    </tr>
    <tr>
      <th>17</th>
      <td>0.069610</td>
      <td>ace_df_ratio</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.082652</td>
      <td>p_H2H</td>
    </tr>
    <tr>
      <th>9</th>
      <td>0.101681</td>
      <td>secondW_ratio</td>
    </tr>
    <tr>
      <th>8</th>
      <td>0.111621</td>
      <td>firstW_ratio</td>
    </tr>
    <tr>
      <th>7</th>
      <td>0.115964</td>
      <td>surface_ratio</td>
    </tr>
    <tr>
      <th>15</th>
      <td>0.120492</td>
      <td>round_ratio</td>
    </tr>
    <tr>
      <th>13</th>
      <td>0.329788</td>
      <td>matches_ratio</td>
    </tr>
  </tbody>
</table>
</div>

<p>By far most notable is the effect of <code class="highlighter-rouge">rank_ratio</code>, which tends to swing very heavily for a proportionally smaller change in rankings. The scale of this coefficient will vary depending on how the ranks are being compared; taking the proportion between the two rankings will result in a different spread of values than taking their difference. The coefficient itself is negative precisely because better rankings are smaller numbers, so a very small <code class="highlighter-rouge">rank_ratio</code> means <code class="highlighter-rouge">p</code> has a much better ranking than <code class="highlighter-rouge">o</code>, which means that a decrease in <code class="highlighter-rouge">rank_ratio</code> means a higher probability of <code class="highlighter-rouge">p</code> winning, which corresponds to a value of <code class="highlighter-rouge">1</code> in the target feature, <code class="highlighter-rouge">win</code>.</p>

<p>We could think through all of the features in this way, but most interesting for now is to see roughly where different features fall in the list. It‚Äôs fairly obvious why the model would get a lot of information out of ranking, since we know we can get ~65% of matches right merely by guessing according to that one feature. Age, number of matches played, and surface strength follow ranking in importance, themselves followed by most of the major serve stats. Head-to-head, rank change, height, and my experimental upset factor are among the weakest predictors; I‚Äôm not surprised my upset factor didn‚Äôt work too well, but I am surprised to see head-to-head playing such a small role. These kinds of issues can sometimes result from collinearity, though H2H has relatively weak correlations with other features in the heatmap above. I‚Äôll return to these results and think through them further in future posts, as I continue to develop the models.</p>

<p>Now for the random forest. We can‚Äôt compare these values directly to the logistic regression coefficients because they‚Äôre not measuring the same thing; partly because they‚Äôre aggregated from the many individual predictors, the random forest feature importance values don‚Äôt relate quite as straightforwardly to the model‚Äôs output, and we can get a basic intuitive sense of this from the fact that none of them have negative values, which means they aren‚Äôt just pushing the resulting classification towards <code class="highlighter-rouge">1</code> or <code class="highlighter-rouge">0</code> as in the logistic regression. Nonetheless, we can still get a sense of how the model is handling different features based on the relative differences in the importance values.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rf_feats</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="s">'importance'</span><span class="p">:</span> <span class="n">rf_model</span><span class="p">.</span><span class="n">feature_importances_</span><span class="p">,</span> <span class="s">'feature'</span><span class="p">:</span><span class="n">X</span><span class="p">.</span><span class="n">columns</span><span class="p">})</span>
<span class="n">rf_feats</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'importance'</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: center;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th>importance</th>
      <th>feature</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>0.001076</td>
      <td>p_H2H</td>
    </tr>
    <tr>
      <th>15</th>
      <td>0.007635</td>
      <td>round_ratio</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.009847</td>
      <td>ht_ratio</td>
    </tr>
    <tr>
      <th>6</th>
      <td>0.012485</td>
      <td>first_in_ratio</td>
    </tr>
    <tr>
      <th>16</th>
      <td>0.012735</td>
      <td>bestof_ratio</td>
    </tr>
    <tr>
      <th>11</th>
      <td>0.013620</td>
      <td>bpSaved_ratio</td>
    </tr>
    <tr>
      <th>17</th>
      <td>0.014747</td>
      <td>ace_df_ratio</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.014897</td>
      <td>o_rank_change</td>
    </tr>
    <tr>
      <th>0</th>
      <td>0.016405</td>
      <td>p_rank_change</td>
    </tr>
    <tr>
      <th>12</th>
      <td>0.017786</td>
      <td>upset_ratio</td>
    </tr>
    <tr>
      <th>9</th>
      <td>0.020039</td>
      <td>secondW_ratio</td>
    </tr>
    <tr>
      <th>14</th>
      <td>0.021930</td>
      <td>hand_ratio</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.022575</td>
      <td>age_ratio</td>
    </tr>
    <tr>
      <th>10</th>
      <td>0.022979</td>
      <td>bpFaced_ratio</td>
    </tr>
    <tr>
      <th>13</th>
      <td>0.028056</td>
      <td>matches_ratio</td>
    </tr>
    <tr>
      <th>7</th>
      <td>0.030229</td>
      <td>surface_ratio</td>
    </tr>
    <tr>
      <th>8</th>
      <td>0.032017</td>
      <td>firstW_ratio</td>
    </tr>
    <tr>
      <th>5</th>
      <td>0.700941</td>
      <td>rank_ratio</td>
    </tr>
  </tbody>
</table>
</div>

<p>Once again, H2H comes in at the bottom and <code class="highlighter-rouge">rank_ratio</code> is most important (and by a massive margin). Rank change seems to be slightly more important here than for the logistic regression, while performance by round goes from being one of the most important features to one of the least important. It‚Äôs also interesting that the two models swap the order of importance for break points faced and break points saved. These differences will all be worth exploring in the future.</p>

<p>Finally, to compare more closely with the bookmakers‚Äô results, we need to know how the models perform on upsets, not just the generic accuracy across all matches. To that end, I refit both models on a single training-validation split ‚Äì this gives a slightly incomplete picture since the random split will give less consistent results than we‚Äôd get from cross-validation, but it gets us in the ballpark and gives us easier access to the specific feature and target values, which we need in order to do some additional analysis. As before, we‚Äôll compute specificity (what proportion of the non-upsets did we get right?), sensitivity (what proportion of the upsets did we get right?), negative predictive value (how often were we right when we guessed that a match was not an upset?), and precision (how often were we right when we guessed that a match was an upset?).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Do one sample train-test split for testing upset results
</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_valid</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_valid</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X_t</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">train_size</span><span class="o">=</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span> <span class="c1"># random_state
</span>
<span class="n">log_model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">rf_model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">upset_stats</span><span class="p">(</span><span class="n">X_valid</span><span class="p">,</span> <span class="n">y_valid</span><span class="p">,</span> <span class="n">X_columns</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>

    <span class="n">X_v_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">scaler</span><span class="p">.</span><span class="n">inverse_transform</span><span class="p">(</span><span class="n">X_valid</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="n">X_columns</span><span class="p">)</span>
    <span class="n">X_v_df</span><span class="p">[</span><span class="s">'win'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">y_valid</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>

    <span class="n">probs</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">predict_proba</span><span class="p">(</span><span class="n">X_valid</span><span class="p">)</span>
    <span class="n">predicts</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_valid</span><span class="p">)</span>
    <span class="n">actual</span> <span class="o">=</span> <span class="n">y_valid</span><span class="p">.</span><span class="n">values</span>
    <span class="n">correct</span> <span class="o">=</span> <span class="n">predicts</span> <span class="o">==</span> <span class="n">actual</span>

    <span class="n">X_v_df</span><span class="p">[</span><span class="s">'predicted'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">predicts</span><span class="p">)</span>

    <span class="s">'''upset_1 = (X_v_df['rank_diff'] &gt; 0) &amp; (X_v_df['win'] == 1)
    upset_2 = (X_v_df['rank_diff'] &lt; 0) &amp; (X_v_df['win'] == 0)
    upset = upset_1 | upset_2'''</span>

    <span class="n">upset_1</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_v_df</span><span class="p">[</span><span class="s">'rank_ratio'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">X_v_df</span><span class="p">[</span><span class="s">'win'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">upset_2</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_v_df</span><span class="p">[</span><span class="s">'rank_ratio'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">X_v_df</span><span class="p">[</span><span class="s">'win'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">upset</span> <span class="o">=</span> <span class="n">upset_1</span> <span class="o">|</span> <span class="n">upset_2</span>

    <span class="n">predicted_upset_cor</span> <span class="o">=</span> <span class="n">upset</span> <span class="o">&amp;</span> <span class="n">correct</span>

    <span class="s">'''pred_upset_1 = (X_v_df['rank_diff'] &gt; 0) &amp; (X_v_df['predicted'] == 1)
    pred_upset_2 = (X_v_df['rank_diff'] &lt; 0) &amp; (X_v_df['predicted'] == 0)
    pred_upset = pred_upset_1 | pred_upset_2'''</span>

    <span class="n">pred_upset_1</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_v_df</span><span class="p">[</span><span class="s">'rank_ratio'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">X_v_df</span><span class="p">[</span><span class="s">'predicted'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">pred_upset_2</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_v_df</span><span class="p">[</span><span class="s">'rank_ratio'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">X_v_df</span><span class="p">[</span><span class="s">'predicted'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">pred_upset</span> <span class="o">=</span> <span class="n">pred_upset_1</span> <span class="o">|</span> <span class="n">pred_upset_2</span>

    <span class="k">print</span><span class="p">(</span><span class="s">'specificity and neg pred value: '</span><span class="p">,</span>
        <span class="p">(</span><span class="o">~</span><span class="n">upset</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">pred_upset</span><span class="p">).</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="p">(</span><span class="o">~</span><span class="n">upset</span><span class="p">).</span><span class="nb">sum</span><span class="p">(),</span>
          <span class="p">(</span><span class="o">~</span><span class="n">upset</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">pred_upset</span><span class="p">).</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="p">(</span><span class="o">~</span><span class="n">pred_upset</span><span class="p">).</span><span class="nb">sum</span><span class="p">()</span>
    <span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">'sensitivity and precision: '</span><span class="p">,</span>
          <span class="n">predicted_upset_cor</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">upset</span><span class="p">.</span><span class="nb">sum</span><span class="p">(),</span>
          <span class="n">predicted_upset_cor</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">pred_upset</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span>
         <span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Logistic model"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Accuracy:'</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">log_score</span><span class="p">))</span>
<span class="n">upset_stats</span><span class="p">(</span><span class="n">X_valid</span><span class="p">,</span> <span class="n">y_valid</span><span class="p">,</span> <span class="n">X</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span> <span class="n">log_model</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Random Forest model"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Accuracy:'</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">rf_score</span><span class="p">))</span>
<span class="n">upset_stats</span><span class="p">(</span><span class="n">X_valid</span><span class="p">,</span> <span class="n">y_valid</span><span class="p">,</span> <span class="n">X</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span> <span class="n">rf_model</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Logistic model
Accuracy: 0.6580618022448217
specificity and neg pred value:  0.8527946873270614 0.7027972027972028
sensitivity and precision:  0.29345861944344054 0.5043478260869565

Random Forest model
Accuracy: 0.6649989741800371
specificity and neg pred value:  0.9324847814056447 0.6854237288135593
sensitivity and precision:  0.16154680159016985 0.5498154981549815
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"BCM (odds) model (2010‚Äì2015)"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Accuracy:"</span><span class="p">,</span> <span class="n">odds_matches</span><span class="p">[</span><span class="s">'pred_match_correctly'</span><span class="p">].</span><span class="n">mean</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="s">'specificity and neg pred value: '</span><span class="p">,</span> <span class="n">odds_spec</span><span class="p">,</span> <span class="n">odds_npv</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'sensitivity and precision: '</span><span class="p">,</span> <span class="n">odds_sens</span><span class="p">,</span> <span class="n">odds_prec</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BCM (odds) model (2010‚Äì2015)
Accuracy: 0.7104411169566976
specificity and neg pred value:  0.8934327155519742 0.7331790378574972
sensitivity and precision:  0.34095549203756637 0.6121700879765396
</code></pre></div></div>

<p>The most accurate of my models, the random forest, comes in around 4.5% behind the BCM, with the logistic regression trailing that by another 0.6%. The random forest has the best specificity, correctly calling 93% of the non-upsets, over the BCM‚Äôs roughly 89% and the logistic regression‚Äôs 87%, but the random forest gets that performance at the cost of a worse hit rate, being comparatively too eager to predict non-upsets (this is perhaps not surprising given the huge weight the random forest places on ranking).</p>

<p>The random forest also did quite poorly at picking upsets, only getting about 16% of them, compared to a very respectable 29% for the logistic regression and more impressive 34% for the BCM. The random forest was more likely than the logistic regression to be correct when it did pick an upset (56% to 51%), but this is partly just because it did so less often.</p>

<p>The BCM clearly wins out here (though it‚Äôs important to keep in mind that it only represents a subset of the matches included in my models, so it‚Äôs only to be understood as a rough baseline). I‚Äôm not unhappy with the performance of these basic models,given that there seems to be a lot of room for more feature engineering. I won‚Äôt be retiring early (or going to work for the bookmakers) just yet, but I‚Äôm excited to explore some of the avenues mentioned throughout this post, and particularly to take a closer look at the confidence values offered by the models in relation to the feature importances. It will also be interesting to test an even simpler decision tree model, which will allow for easy visualization and the development of some intuitions about how the data is leading to particular decisions. It would also be worth tracking some of the models‚Äô statistics over time to see if there are any seasonal patterns; do predictions get better or worse at grand slams, either for upsets or for all matches? How does the specific ranking of either player affect the prediction? The published literature offers some limited insight into these kinds of questions, but there‚Äôs much more that could be done. It will also be interesting to look closely at some specific matches to see where the models are going wrong (or right) for particular kinds of matchups.</p>

<p><strong>To be continued . . .</strong></p>
:ET